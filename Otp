package com.epay.merchant.dao;

import com.epay.merchant.dto.OtpGenerationDto;
import com.epay.merchant.entity.MerchantUser;
import com.epay.merchant.entity.OtpManagement;
import com.epay.merchant.mapper.OtpManagementMapper;
import com.epay.merchant.repository.MerchantUserRepository;
import com.epay.merchant.repository.OtpManagementRepository;
import com.epay.merchant.util.enums.NotificationType;
import com.epay.merchant.util.enums.RequestType;
import com.epay.merchant.util.enums.UserStatus;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

@Repository
@RequiredArgsConstructor
public class OtpManagementDao {

    private final OtpManagementRepository otpManagementRepository;
    private final MerchantUserRepository merchantUserRepository;
    private final NotificationDao notificationDao;
    private final OtpManagementMapper otpManagementMapper;

    public UUID save(OtpGenerationDto otpGenerationDto) {
        MerchantUser merchantUser = merchantUserRepository.findByUserNameOrEmailOrMobilePhone(otpGenerationDto.getUserName(), otpGenerationDto.getUserName(), otpGenerationDto.getUserName());
        OtpManagement otpManagement = otpManagementMapper.mapOtpGenerationDtoToOtpManagement(otpGenerationDto);
        otpManagement.setUserId(merchantUser.getId());
        otpManagement = otpManagementRepository.save(otpManagement);
        return otpManagement.getId();
    }

    public void saveNotification(OtpGenerationDto otpGenerationDto, String content, int status, NotificationType notificationType) {
        notificationDao.saveOtpGenerationNotification(otpGenerationDto, content, status, notificationType);
    }
}



@Repository
public interface MerchantUserRepository extends JpaRepository<MerchantUser, UUID> {

    @Query("select m FROM MerchantUser m, MerchantEntityUser meu, MerchantEntityGroup meg " +
            "WHERE m.id = meu.userId and ((meu.mId = :mid and meu.entityId is null) or (meg.entityId = meu.entityId and meg.mId = :mid ))")
    Page<MerchantUser> findBymId(@Param("mid") String mId, Pageable pageable);

    boolean existsByUserNameOrEmailOrMobilePhoneAndStatus(String userName, String email, String mobilePhone, String status);

    boolean existsByUserNameOrEmailOrMobilePhone(String userName, String email, String mobilePhone);

    MerchantUser findByUserNameOrEmailOrMobilePhone(String userName, String email, String mobilePhone);

    @Query("select count(m) > 0 FROM MerchantUser m WHERE (m.userName = :userName OR m.email = :userName OR m.mobilePhone = :userName) AND m.password = :password")
    boolean isMerchantUserExistsByUserNameOrEmailOrMobilePhoneAndPassword(@Param("userName") String userName, @Param("password") String password);

}

@EqualsAndHashCode(callSuper = true)
@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "OTP_MANAGEMENT")
public class OtpManagement extends AuditEntityByDate {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @Enumerated(EnumType.STRING)
    private RequestType requestType;
    private UUID userId;
    private UUID requestId;
    private String otpCode;
    private Long expiryTime;
    private boolean isVerified;

}
