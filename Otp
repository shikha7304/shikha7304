package com.epay.merchant.service;

import com.epay.merchant.dao.AdminDao;
import com.epay.merchant.dto.MerchantDto;
import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.dto.OnboardingDto;
import com.epay.merchant.entity.MerchantInfo;
import com.epay.merchant.entity.MerchantUser;
import com.epay.merchant.entity.MerchantUserRole;
import com.epay.merchant.mapper.MerchantMapper;
import com.epay.merchant.model.request.OnboardingRequest;
import com.epay.merchant.model.response.MerchantUserResponse;
import com.epay.merchant.model.response.OnboardingResponse;
import com.epay.merchant.repository.MerchantUserRoleRepository;
import com.epay.merchant.util.PasswordGenerator;
import com.epay.merchant.validator.OnboardingValidator;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;

@ExtendWith(MockitoExtension.class)
public class AdminServiceTest {


    @Mock
    private AdminDao adminDao;
    @Mock
    private OnboardingValidator validator;

    @Mock
    private MerchantMapper mapper;
    @Mock
    private PasswordGenerator passwordGenerator;
    @Mock
    MerchantUserRoleRepository merchantUserRoleRepository ;

    @InjectMocks
    private AdminService adminService;
    private AutoCloseable closeable;
    private OnboardingRequest onboardingRequest;


    private MerchantUser merchantUser;
    private MerchantUserResponse merchantUserResponse;

    @BeforeEach
    void setUp() {
        closeable = MockitoAnnotations.openMocks(this);
        onboardingRequest = OnboardingRequest.builder().merchant(MerchantDto.builder().build()).user(MerchantUserDto.builder().build()).build();
    }

    @AfterEach
    void tearDown() throws Exception {
        closeable.close();
    }

    @Test
    public void onboardingTest() {
        OnboardingDto onboardingRequestDB = OnboardingDto.builder()
                .merchant(MerchantDto.builder().mId("100011").build())
                .build();
        MerchantDto merchantDto = new MerchantDto();
        MerchantInfo merchantInfo = new MerchantInfo();
        MerchantUserRole merchantUserRole = new MerchantUserRole();
        merchantUserRole.setRole("admin");
        merchantUserRole.setId(UUID.randomUUID());
        merchantInfo.setMId("mid");
        Mockito.when(mapper.mapMerchantDtoToEntity(merchantDto)).thenReturn(merchantInfo);
        Mockito.when(adminDao.onboardingMerchantAndMerchantUser(onboardingRequest)).thenReturn(onboardingRequestDB);
        Mockito.when(passwordGenerator.generatePassword()).thenReturn("test");
        Mockito.when(adminDao.getAdminRoleId()).thenReturn(merchantUserRole);
        List<OnboardingResponse> onboardingRequestRes = adminService.onboardingMerchant(onboardingRequest).getData();
        assertNotNull(onboardingRequestRes);
        assertNotNull(onboardingRequestRes.getFirst().getMerchant().getMId());
    }
}


  public MerchantResponse<OnboardingResponse> onboardingMerchant(OnboardingRequest onboardingRequest) {
        //Step 1 : OnboardingRequest validation
        onboardingValidator.validateOnboardingRequest(onboardingRequest);
        //Step 2 : Set up the default value for Merchant and Merchant User
        String password = passwordGenerator.generatePassword();
        setMerchantDefaultValues(onboardingRequest, password);
        //Step 3 : Save the Merchant and Merchant User Data in DB
        OnboardingDto onboardingDto = adminDao.onboardingMerchantAndMerchantUser(onboardingRequest);
        //Step 4 : Send Notification to Merchant User
        sendNotification(onboardingDto);
        //Step 5 : Build MerchantResponse and return to caller
        return MerchantResponse.<OnboardingResponse>builder().data(List.of(OnboardingResponse.builder().merchant(onboardingDto.getMerchant()).user(onboardingDto.getUser()).build())).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).build();
    }


onboardingMerchantAndMerchantUser(OnboardingRequest onboardingRequest) {
        MerchantInfo merchantInfo = mapper.mapMerchantDtoToEntity(onboardingRequest.getMerchant());
        merchantInfo = merchantRepository.save(merchantInfo);

        MerchantUser merchantUser = mapper.mapMerchantUserDtoToEntity(onboardingRequest.getUser());
        merchantUser = merchantUserRepository.save(merchantUser);

        assignMerchantToUser(merchantUser.getId(), merchantInfo.getMId());

        createMerchantUserMenuPermissions(merchantUser.getId(), merchantUser.getRole());

        return OnboardingDto.builder().merchant(mapper.mapMerchantInfoEntityToDto(merchantInfo)).user(mapper.mapMerchantUserEntityToDto(merchantUser)).build();
    }



Cannot invoke "com.epay.merchant.entity.MerchantUserRole.getId()" because the return value of "com.epay.merchant.dao.AdminDao.getAdminRoleId()" is null
java.lang.NullPointerException: Cannot invoke "com.epay.merchant.entity.MerchantUserRole.getId()" because the return value of "com.epay.merchant.dao.AdminDao.getAdminRoleId()" is null
	at com.epay.merchant.service.AdminService.setMerchantUserDefaultValues(AdminService.java:140)
	at com.epay.merchant.service.AdminService.setMerchantDefaultValues(AdminService.java:114)
	at com.epay.merchant.service.AdminService.onboardingMerchant(AdminService.java:77)
	at com.epay.merchant.service.AdminServiceTest.onboardingTest(AdminServiceTest.java:85)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)


OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended

> Task :test
AdminServiceTest > onboardingTest() FAILED
    java.lang.NullPointerException at AdminServiceTest.java:85
1 test completed, 1 failed
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import com.epay.merchant.mapper.MerchantMapper;
private final MerchantMapper mapper;

   public MerchantResponse<OnboardingResponse> onboardingMerchant(OnboardingRequest onboardingRequest) {
        //Step 1 : OnboardingRequest validation
        onboardingValidator.validateOnboardingRequest(onboardingRequest);
        //Step 2 : Set up the default value for Merchant and Merchant User
        String password = passwordGenerator.generatePassword();
        setMerchantDefaultValues(onboardingRequest, password);
        //Step 3 : Save the Merchant and Merchant User Data in DB
        OnboardingDto onboardingDto = adminDao.onboardingMerchantAndMerchantUser(onboardingRequest);
        //Step 4 : Send Notification to Merchant User
        sendNotification(onboardingDto);
        //Step 5 : Build MerchantResponse and return to caller
        return MerchantResponse.<OnboardingResponse>builder().data(List.of(OnboardingResponse.builder().merchant(onboardingDto.getMerchant()).user(onboardingDto.getUser()).build())).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).build();
    }
    private void setMerchantDefaultValues(OnboardingRequest onboardingRequest, String password) {
        setMerchantDefaultValues(onboardingRequest.getMerchant());
        setMerchantUserDefaultValues(onboardingRequest.getUser(), password);
    }
    private void setMerchantDefaultValues(MerchantDto merchant) {
        if (Arrays.stream(NotificationType.values()).noneMatch(nt -> StringUtils.equalsAnyIgnoreCase(merchant.getNotification(), nt.name()))) {
            merchant.setNotification(NotificationType.BOTH.name());
        }
        if (StringUtils.isEmpty(merchant.getEncryptedAlgo())) {
            merchant.setEncryptedAlgo(HashAlgorithm.SHA_512.toString());
        }
        if (ObjectUtils.isEmpty(merchant.getStatus())) {
            merchant.setStatus(MerchantStatus.ACTIVE);
        }
    }
    private void setMerchantUserDefaultValues(MerchantUserDto user, String password) {
        user.setRole(adminDao.getAdminRoleId().getId());
        if (ObjectUtils.isEmpty(user.getStatus())) {
            user.setStatus(UserStatus.ACTIVE);
        }
        user.setPassword(EncryptionDecryptionUtil.hashValue(password));
        user.setPasswordExpiryTime(DateTimeUtils.getFutureDateByMonth(merchantConfig.getPasswordExpiryMonths()));
    }
    private void sendNotification(OnboardingDto onboardingDto) {
        switch (NotificationType.getType(onboardingDto.getMerchant().getNotification())) {
            case NotificationType.EMAIL -> sendEmail();
            case NotificationType.SMS -> sendSMS();
            default -> {//BOTH
                sendEmail();
                sendSMS();
            }
        }
    }


