package com.epay.merchant.service;

import com.epay.merchant.dao.MerchantInfoDao;
import com.epay.merchant.dto.MerchantInfoDto;
import com.epay.merchant.entity.MerchantInfo;
import com.epay.merchant.mapper.MerchantMapper;
import com.epay.merchant.model.response.MerchantInfoResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.repository.MerchantInfoRepository;
import com.epay.merchant.util.MerchantConstant;
import com.fasterxml.jackson.databind.DeserializationFeature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class MerchantUserServiceTest {

    @InjectMocks
    private MerchantUserService merchantUserService;

    @Mock
    private MerchantInfoDao merchantInfoDao;

    @Mock
    private MerchantMapper merchantMapper;

    @Mock
    private MerchantInfoRepository merchantInfoRepository;

    @Mock
    MerchantInfo merchantInfo;
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
       
    }

    @Test
    void testGetAllAccessMerchantInfo() {
        Pageable pageable = PageRequest.of(0, 10);
        MerchantInfoDto dto1 = new MerchantInfoDto("1", "Merchant1", "ACTIVE");
        MerchantInfoDto dto2 = new MerchantInfoDto("2", "Merchant2", "INACTIVE");

        MerchantInfo merchantInfo= new MerchantInfo();
        merchantInfo.setChargebackAllowed(true);

        List<MerchantInfoDto> dtoList = List.of(dto1, dto2);
        Page<MerchantInfoDto> page = new PageImpl<>(dtoList, pageable, dtoList.size());

        MerchantInfoResponse response1 = new MerchantInfoResponse("1", "Merchant1", "ACTIVE");
        MerchantInfoResponse response2 = new MerchantInfoResponse("2", "Merchant2", "INACTIVE");

        List<MerchantInfoResponse> responseList = List.of(response1, response2);

        when(merchantInfoDao.getALl(pageable)).thenReturn(page);
        when(merchantMapper.mapMerchantInfoDTOListToResponseList(dtoList)).thenReturn(responseList);
        when(merchantInfoDao.getAllAccessMerchantInfoForMerchantUser("userName",pageable)).thenReturn(page);
        MerchantResponse<MerchantInfoResponse> result = merchantUserService.getAllAccessMerchantInfo(pageable);


        assertNotNull(result);
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, result.getStatus());
        assertEquals(2, result.getCount());
        assertEquals(2, result.getTotal());
        assertEquals(responseList, result.getData());

        verify(merchantInfoDao, times(1)).getALl(pageable);
        verify(merchantMapper, times(1)).mapMerchantInfoDTOListToResponseList(dtoList);
    }

    @Test
    void testGetAllAccessMerchantInfoEmptyResult() {
        Pageable pageable = PageRequest.of(0, 10);
        Page<MerchantInfoDto> emptyPage = Page.empty();

        when(merchantInfoDao.getALl(pageable)).thenReturn(emptyPage);
        when(merchantMapper.mapMerchantInfoDTOListToResponseList(Collections.emptyList())).thenReturn(Collections.emptyList());

        MerchantResponse<MerchantInfoResponse> result = merchantUserService.getAllAccessMerchantInfo(pageable);

        assertNotNull(result);
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, result.getStatus());
        assertEquals(0, result.getCount());
        assertEquals(0, result.getTotal());
        assertEquals(Collections.emptyList(), result.getData());

        verify(merchantInfoDao, times(1)).getALl(pageable);
        verify(merchantMapper, times(1)).mapMerchantInfoDTOListToResponseList(Collections.emptyList());
    }
}


  public MerchantResponse<MerchantInfoResponse> getAllAccessMerchantInfo(Pageable pageable) {
        log.info("Fetching all merchant information");
        String userName = "Ranu"; // TODO Need to get from SecurityContext

        Page<MerchantInfoDto> merchantInfo = merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(userName, pageable);
        log.info("Fetched MerchantInfoDto page");
        //Mapping DTO to Response Object
        List<MerchantInfoResponse> merchantInfoResponseList = merchantMapper.mapMerchantInfoDTOListToResponseList(merchantInfo.getContent());
        //Building the response
        return MerchantResponse.<MerchantInfoResponse>builder().status(MerchantConstant.RESPONSE_SUCCESS).data(merchantInfoResponseList).count(merchantInfo.stream().count()).total(merchantInfo.getTotalElements()).build();
    }



Cannot invoke "org.springframework.data.domain.Page.getContent()" because "merchantInfo" is null
java.lang.NullPointerException: Cannot invoke "org.springframework.data.domain.Page.getContent()" because "merchantInfo" is null
	at com.epay.merchant.service.MerchantUserService.getAllAccessMerchantInfo(MerchantUserService.java:50)
	at com.epay.merchant.service.MerchantUserServiceTest.testGetAllAccessMerchantInfo(MerchantUserServiceTest.java:72)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)


OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
Disconnected from the target VM, address: 'localhost:58860', transport: 'socket'
