  @Test
    void testGetMerchantEncryptionKeysForDownload() throws IOException {
        String mId = "12345";
        String mek = "testKey";
        UUID id= UUID.randomUUID();
        Map<String, String> expectedInput = new HashMap<>();
        expectedInput.put(MerchantConstant.MEK, mek);
        ByteArrayOutputStream pdfStream = new ByteArrayOutputStream();
        byte[] inputBytes = expectedInput.toString().getBytes();
        pdfStream.write(inputBytes);

        byte[] array = mId.getBytes();
        pdfStream.write(array);
        String password = "securePwd";

        doNothing().when(keyValidator).validateMId(mId);
        when(keyDao.getMerchantEncryptionKeysForDownload(mId)).thenReturn(mek);
        Mockito.doNothing().when(keyDao).saveNotification(KeyType.API, id, "API Key PDF File Password is :" + password, mId);
        when(passwordGenerator.generatePassword()).thenReturn(password);

        when(pdfService.generatedPDF(expectedInput, password, ("encryption_key"))).thenReturn(pdfStream);
        when(keyService.pdfFileGenerator(mId,mek,id)).thenReturn(pdfStream);

        keyService.getMerchantEncryptionKeysForDownload(mId, response);
        doNothing().when(keyService).fileResponse(KeyType.ENCRYPTION,keyGenerationRequest,response,pdfStream);
        verify(keyValidator).validateMId(mId);
        verify(keyDao).getMerchantEncryptionKeysForDownload(mId);
        verify(keyService).pdfFileGenerator(eq(mId), eq(mek), any(UUID.class));
        verify(keyService).fileResponse(eq(KeyType.ENCRYPTION), any(), eq(response), eq(pdfStream));
    }


    protected ByteArrayOutputStream pdfFileGenerator(String mId, String mek, UUID id) {
        String password = passwordGenerator.generatePassword();
        Map<String, String> input = new HashMap<>();
        input.put(MerchantConstant.MEK,mek);
        ByteArrayOutputStream byteArrayOutputStream = pdfService.generatedPDF(input, password,"encryption_key");
        // Step 3 : Send Notification to Merchant
        keyDao.saveNotification(KeyType.ENCRYPTION, id, "Encryption Key PDF file Password is :" + password, mId);
        logger.info("File Generate for encryptionKey");
        return byteArrayOutputStream;
    }


'saveNotification' is a *void method* and it *cannot* be stubbed with a *return value*!
Voids are usually stubbed with Throwables:
    doThrow(exception).when(mock).someVoidMethod();
If you need to set the void method to do nothing you can use:
    doNothing().when(mock).someVoidMethod();
For more information, check out the javadocs for Mockito.doNothing().
***
If you're unsure why you're getting above error read on.
Due to the nature of the syntax above problem might occur because:
1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.
2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.
3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - 
   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.
4. Mocking methods declared on non-public parent classes is not supported.

org.mockito.exceptions.misusing.CannotStubVoidMethodWithReturnValue: 
'saveNotification' is a *void method* and it *cannot* be stubbed with a *return value*!
Voids are usually stubbed with Throwables:
    doThrow(exception).when(mock).someVoidMethod();
If you need to set the void method to do nothing you can use:
    doNothing().when(mock).someVoidMethod();
For more information, check out the javadocs for Mockito.doNothing().
***
If you're unsure why you're getting above error read on.
Due to the nature of the syntax above problem might occur because:
1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.
2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.
3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - 
   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.
4. Mocking methods declared on non-public parent classes is not supported.

	at com.epay.merchant.service.KeyServiceTest.testGetMerchantEncryptionKeysForDownload(KeyServiceTest.java:255)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
