package com.epay.merchant.dao;

import com.epay.merchant.entity.LoginPasswordAudit;
import com.epay.merchant.entity.cache.CaptchaManagement;
import com.epay.merchant.repository.LoginPasswordAuditRepository;
import com.epay.merchant.util.enums.RequestType;
import com.epay.merchant.util.enums.UserStatus;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.UUID;

/**
 * Class Name: MerchantBankDao
 * Description:
 * MerchantBankDao is responsible for handling database operations related to merchant banking information.
 * It interacts with repositories to perform CRUD operations for merchant-related data, such as banking details,
 * account information, and other merchant-specific financial data. This class helps ensure that the banking information
 * of merchants is accurately stored and retrieved in the system.
 * Author: Subhra Goswami
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * <p>
 * Version: 1.0
 */

@Component
@RequiredArgsConstructor
public class LoginDao {

    private final MerchantUserDao merchantUserDao;
    private final CaptchaDao captchaDao;
    private final LoginPasswordAuditRepository loginPasswordAuditRepository;
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * It will check if the user already exists or not for given userName and pwd
     * Checks if the merchant user exists by username and pwd.
     *
     * @param userName String
     * @param pwd      String
     * @return Boolean
     */
    public boolean isMerchantUserExistsByUserNameAndPassword(String userName, String pwd) {
        log.info("Checking if merchant user exists for username: {}", userName);
        return merchantUserDao.isMerchantUserExistByUserNameAndPassword(userName, pwd);
    }

    /**
     * Saves the login audit details for the given username and request type.
     * It will fetch the active user and save login details in audit table
     *
     * @param userName    String
     * @param requestType RequestType
     * @param status      boolean
     * @param reason      String
     */
    public void saveLoginAudit(String userName, RequestType requestType, boolean status, String reason) {
        log.info("Saving login audit for username: {}, requestType: {}, status: {}, reason: {}", userName, requestType, status, reason);
        UUID userId = merchantUserDao.getByUserNameOrEmailOrMobilePhoneAndStatus(userName, userName, userName, List.of(UserStatus.values())).getId();
        LoginPasswordAudit loginPasswordAudit = LoginPasswordAudit.builder().userId(userId).requestType(requestType).status(status).reason(reason).build();
        loginPasswordAuditRepository.save(loginPasswordAudit);
    }

    /**
     * It will update the captcha isVerified field
     *
     * @param requestId UUID
     */
    public void updateCaptchaIsVerified(UUID requestId) {
        CaptchaManagement captchaManagement = captchaDao.getActiveCaptchaByRequestId(requestId);
        captchaManagement.setVerified(true);
        captchaDao.save(captchaManagement);
    }

}
