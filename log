package com.epay.merchant.service;


import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.enums.Report;
import com.epay.merchant.util.enums.ReportFormat;
import com.epay.merchant.util.file.generator.FileGenerator;
import com.epay.merchant.util.file.model.FileModel;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class FileGeneratorService {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private static int DEFAULT_BUFFER_SIZE = 8192;
    private final   FileGenerator fileGenerator;

    /**
     * Building content type and setting file in response.
     * @param httpResponse HttpServletResponse
     * @param reportFormat ReportFormat
     */
    public  void downloadFile(HttpServletResponse httpResponse, ReportFormat reportFormat,List<MerchantUserDto>merchantUserDtos) {
        String contentType = "text/csv";
        String filename="abc";
        setFileResponse(httpResponse, contentType,filename,merchantUserDtos);
    }

    public  FileModel buildFileModel(ReportFormat reportFormat, List<String> header, List<List<Object>> fileData, Map<String, Object> pdfFileData) {
        return fileGenerator.buildFileModel(reportFormat, header, fileData, pdfFileData);
    }

    public File fileGenerator(ReportFormat reportFormat, Report report, String userName, FileModel fileModel) {
        return fileGenerator.fileGenerator(reportFormat, report, userName, fileModel);
    }
    /**
     * TODO: Temp code: it will replace from S3 code.
     * @param filePath String
     * @return InputStream
     */
    private InputStream getFileContent(String filePath) {
        try {
            return new FileInputStream(filePath);
        } catch (IOException e) {
            log.error("Unable to read file {}", filePath, e);
            throw new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, filePath));
        }
    }

    /**
     * Setting file name, content type and content in http servlet response.
     * @param response HttpServletResponse
     * @param contentType String
     * @param fileName String
     */
    protected void setFileResponse(HttpServletResponse response, String contentType, String fileName,  List<MerchantUserDto> merchantUserResponseList) {
        // Set the response headers for a downloadable file
        response.setContentType(contentType);
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION,  StringEscapeUtils.escapeJava("attachment;filename=" + fileName));
        // Write the file content to the response output stream
        try {
            // Write CSV header
            String header = "User ID,Name,Email,Mobile No,User Type,Creation Date,Status\n";
            response.getWriter().write(header);
            // Fetch the data and write rows
            for (MerchantUserDto user : merchantUserResponseList) {
                String csvRow = user.getId() + ","
                        + user.getUserName() + ","
                        + user.getFirstName() + " " + user.getLastName()+ ","
                        + user.getEmail() + ","
                        + user.getMobilePhone() + ","
                        + user.getRole() + ","
                        + user.getCreatedAt() + ","
                        + user.getStatus() + "\n";
                response.getWriter().write(csvRow);
            }
                response.getWriter().flush();
        } catch (IOException e) {
            log.error("Error in setting file content in response", e);
            throw new MerchantException(ErrorConstants.GENERIC_ERROR_CODE, MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, fileName));
        } finally {
            try {
                response.getOutputStream().flush();
                response.getOutputStream().close();
            } catch (IOException e) {
                log.error("An error occurred while closing connection in setFileResponse method: {}", e.getMessage());
                throw new MerchantException(ErrorConstants.FILE_GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "xlsx", e.getMessage()));
            }
        }
    }
}
