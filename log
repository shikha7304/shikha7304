@Test
void testDerivePrincipal_WithRole() {
    String token = "jwtToken";
    
    // Use RETURNS_DEEP_STUBS to prevent issues with entrySet() calls
    Claims claims = mock(Claims.class, RETURNS_DEEP_STUBS);

    when(claims.getIssuer()).thenReturn("expectedIssuer");
    when(claims.getExpiration()).thenReturn(new Date(System.currentTimeMillis() + 100000));
    when(claims.get(EPayJwtClaimsSet.ROLE, ArrayList.class)).thenReturn(new ArrayList<>(List.of("ROLE_ADMIN")));
    when(claims.get(EPayJwtClaimsSet.USERNAME, String.class)).thenReturn("adminUser");
    when(claims.get(EPayJwtClaimsSet.MID, String.class)).thenReturn("MID123");
    when(claims.get(EPayJwtClaimsSet.ORDER_NUMBER, String.class)).thenReturn("ORD456");
    when(claims.get(EPayJwtClaimsSet.ATRN_NUMBER, String.class)).thenReturn("ATRN789");
    when(claims.get(EPayJwtClaimsSet.TYPE, String.class)).thenReturn("AdminToken");

    // Ensure jwtService returns the mocked claims object
    when(jwtService.verifyJwtTokenAndGetClaims(token)).thenReturn(claims);

    JwtAuthenticationToken authentication = (JwtAuthenticationToken) jwtAuthenticationProvider.authenticate(new JwtAuthenticationToken(token));
    EPayPrincipal principal = authentication.getPrincipal();

    assertNotNull(principal);
    assertEquals("adminUser", principal.getAuthenticationId());
    assertEquals("MID123", principal.getMId());
    assertEquals("ORD456", principal.getOrderRef());
    assertEquals("ATRN789", principal.getTransactionRef());
    assertEquals("AdminToken", principal.getTokenType());
    assertEquals(List.of("ROLE_ADMIN"), principal.getUserRole());
}


doReturn(claims).when(jwtService).verifyJwtTokenAndGetClaims(token);




@Test
    void testDerivePrincipal_WithRole() {
        String token = "jwtToken";
        when(claims.getIssuer()).thenReturn("expectedIssuer");
        when(claims.getExpiration()).thenReturn(new Date(System.currentTimeMillis()+100000));
        when(claims.get(EPayJwtClaimsSet.ROLE, ArrayList.class)).thenReturn(new ArrayList<>(List.of("ROLE_ADMIN")));
        when(claims.get(EPayJwtClaimsSet.USERNAME, String.class)).thenReturn("adminUser");
        when(claims.get(EPayJwtClaimsSet.MID, String.class)).thenReturn("MID123");
        when(claims.get(EPayJwtClaimsSet.ORDER_NUMBER, String.class)).thenReturn("ORD456");
        when(claims.get(EPayJwtClaimsSet.ATRN_NUMBER, String.class)).thenReturn("ATRN789");
        when(claims.get(EPayJwtClaimsSet.TYPE, String.class)).thenReturn("AdminToken");
        when(jwtService.verifyJwtTokenAndGetClaims(token)).thenReturn(claims);

        JwtAuthenticationToken authentication = (JwtAuthenticationToken) jwtAuthenticationProvider.authenticate(new JwtAuthenticationToken("jwtToken"));
        EPayPrincipal principal = authentication.getPrincipal();

        assertNotNull(principal);
        assertEquals("adminUser", principal.getAuthenticationId());
        assertEquals("MID123", principal.getMId());
        assertEquals("ORD456", principal.getOrderRef());
        assertEquals("ATRN789", principal.getTransactionRef());
        assertEquals("AdminToken", principal.getTokenType());
        assertEquals(List.of("ROLE_ADMIN"), principal.getUserRole());
    }
Claims$MockitoMock$unEq0whf cannot be returned by entrySet()
entrySet() should return Set
***
If you're unsure why you're getting above error read on.
Due to the nature of the syntax above problem might occur because:
1. This exception *might* occur in wrongly written multi-threaded tests.
   Please refer to Mockito FAQ on limitations of concurrency testing.
2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - 
   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.

org.mockito.exceptions.misusing.WrongTypeOfReturnValue: 
Claims$MockitoMock$unEq0whf cannot be returned by entrySet()
entrySet() should return Set
***
If you're unsure why you're getting above error read on.
Due to the nature of the syntax above problem might occur because:
1. This exception *might* occur in wrongly written multi-threaded tests.
   Please refer to Mockito FAQ on limitations of concurrency testing.
2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - 
   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.

	at com.sbi.epay.authentication.service.JwtAuthenticationProviderTest.testDerivePrincipal_WithRole(JwtAuthenticationProviderTest.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
