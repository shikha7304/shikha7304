public class MerchantBankDao {

    private final MerchantBankAccountRepository merchantBankAccountRepository;
    private final AlertDao alertDao;
    private final MerchantMapper mapper;
    private final MerchantConfig merchantConfig;

    /**
     * Saves or updates a merchant bank account.
     * This method maps the provided DTO to an entity, decrypts and masks the account number,
     * checks whether the account is the primary one, and then saves it to the database.
     *
     * @param merchantBankAccountDto The DTO representing the merchant bank account to be saved.
     * @param isCreate               Indicates if the operation is a creation (true) or update (false).
     */
    @Transactional
    public void saveMerchantBankAccount(MerchantBankAccountDto merchantBankAccountDto, boolean isCreate) {
        MerchantBankAccount merchantBankAccount = mapper.mapDtoToEntity(merchantBankAccountDto);
        //Before masking decrypt the account Number
        String accountNumber = decryptValue(merchantConfig.getDecryptionKey(), merchantBankAccountDto.getAccountNumber());
        //Masking accountNumber
        merchantBankAccount.setAccountNumberMasked(maskAccountNumber(accountNumber));
        checkPrimaryAccountAndUpdate(merchantBankAccount);
        saveMerchantBankAccount(isCreate, merchantBankAccount);
    }

    /**
     * Retrieves a list of merchant bank accounts for a given merchant ID (mId).
     * The list is paginated using the provided Pageable object.
     *
     * @param mId      The merchant ID whose bank accounts are to be retrieved.
     * @param pageable The Pageable object for pagination.
     * @return A list of MerchantBankAccountDto objects representing the merchant's bank accounts.
     */
    public Page<MerchantBankAccountDto> getMerchantBankAccountByMId(String mId, Pageable pageable) {
        Page<MerchantBankAccount> merchantBankAccounts = merchantBankAccountRepository.findAllBymId(mId, pageable);
        return merchantBankAccounts.map(this::convertEntityToDTO);
    }
public MerchantBankAccountDto getAccountByAccountUniqueIdentifier(String accountUniqueIdentifier) {
        MerchantBankAccount merchantBankAccount = getMerchantBankAccount(accountUniqueIdentifier);
        return mapper.mapEntityToDto(merchantBankAccount);
    }
 private MerchantBankAccount getMerchantBankAccount(String accountUniqueIdentifier) {
        return merchantBankAccountRepository.findByAccountUniqueIdentifier(accountUniqueIdentifier).orElseThrow(() -> new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "Account Information")));
    }

    /**
     * Converts a MerchantInfo entity to a MerchantInfoDto.
     *
     * @param merchantInfo The MerchantInfo entity to convert.
     * @return A MerchantInfoDto object representing the merchant information.
     */
    private MerchantInfoDto convertEntityToDTO(MerchantInfo merchantInfo) {
        return mapper.mapMerchantInfoEntityToMerchantInfoDto(merchantInfo);
    }
 private void saveMerchantBankAccount(boolean isCreate, MerchantBankAccount merchantBankAccount) {
        merchantBankAccount.setStatus(AccountStatus.APPROVAL_PENDING);
        if (!isCreate) {
            setMerchantAccountDBValueOnUpdate(merchantBankAccount);
        }
        merchantBankAccountRepository.save(merchantBankAccount);
    }

    /**
     * Checks if the given bank account is the primary account for the merchant.
     * If it is, the previous primary account is updated to no longer be primary.
     *
     * @param merchantBankAccount The MerchantBankAccount entity to check and update.
     */
    private void checkPrimaryAccountAndUpdate(MerchantBankAccount merchantBankAccount) {
        if (merchantBankAccount.isPrimary()) {
            Optional<MerchantBankAccount> merchantPrimaryBankAccount = merchantBankAccountRepository.findBymIdAndIsPrimaryTrue(merchantBankAccount.getMId());
            if (merchantPrimaryBankAccount.isPresent()) {
                merchantPrimaryBankAccount.get().setPrimary(false);
                merchantBankAccountRepository.save(merchantPrimaryBankAccount.get());
            }
        }
    }
