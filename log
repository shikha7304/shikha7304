@Test
void testGetParentAssignedMenus() {
    // Ensure parentAssignedMenus is mutable
    List<UserMenuPermissionEntityResponse> parentAssignedMenus = new ArrayList<>(List.of(menuResponse, menuResponse));

    // Mock DAO call to return the mutable list
    when(merchantUserDao.getUserMenuPermission(any(UUID.class))).thenReturn(new ArrayList<>(parentAssignedMenus));

    // Invoke the method under test
    List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of(menuResponse));

    // Validate the response
    assertNotNull(response);
}





@Test
    void testGetParentAssignedMenus() {
        List<MerchantInfoDto> parentAssignedMids = new ArrayList<>(List.of(merchantInfoDto, merchantInfoDto));
        when(merchantUserDao.getUserMenuPermission(any(UUID.class))).thenReturn(List.of(menuResponse));
        List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of(menuResponse));
        assertNotNull(response);
    }


java.lang.UnsupportedOperationException
	at java.base/java.util.ImmutableCollections.uoe(ImmutableCollections.java:142)
	at java.base/java.util.ImmutableCollections$AbstractImmutableCollection.removeAll(ImmutableCollections.java:151)
	at com.epay.merchant.service.MerchantUserService.getParentAssignedMenus(MerchantUserService.java:434)
	at com.epay.merchant.service.MerchantUserServiceTest.testGetParentAssignedMenus(MerchantUserServiceTest.java:328)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

protected List<UserMenuPermissionEntityResponse> getParentAssignedMenus(MerchantUserDto merchantUser, List<UserMenuPermissionEntityResponse> assignedMenus) {
        log.info("Fetching unassigned menus for user ID: {}", merchantUser.getId());
        List<UserMenuPermissionEntityResponse> unAssignedMerchantInfo = new ArrayList<>();

        if (ObjectUtils.isNotEmpty(merchantUser.getParentUserId())) {
            //Step 2: Get Parent Assigned MIDs List
            List<UserMenuPermissionEntityResponse> parentAssignedMenus = merchantUserDao.getUserMenuPermission(merchantUser.getParentUserId());

            //Step 3: Remove Assigned MIDs List from Parent Assigned MIDs List
            parentAssignedMenus.removeAll(assignedMenus);
            for (UserMenuPermissionEntityResponse p : parentAssignedMenus) {
                boolean isFound = false;
                for (UserMenuPermissionEntityResponse a : assignedMenus) {
                    if (a.getMenuCode().equalsIgnoreCase(p.getMenuCode())) {
                        isFound = true;
                        break;
                    }
                }
                if(!isFound) {
                    unAssignedMerchantInfo.add(p);
                }
            }
        }
        log.info("Successfully fetched unassigned menus for user ID: {}", merchantUser.getId());
        return unAssignedMerchantInfo;
    }
