package com.epay.reporting.service;

import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.util.ErrorConstants;
import com.epay.reporting.util.enums.ReportFormat;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class FileDownloadServiceTest {

    private FileDownloadService fileDownloadService;
    private HttpServletResponse mockResponse;
    private ServletOutputStream mockOutputStream;

    @BeforeEach
    void setUp() {
        mockResponse = mock(HttpServletResponse.class);
        mockOutputStream = mock(ServletOutputStream.class);
        fileDownloadService = spy(new FileDownloadService()); // Fixed NullPointerException

        when(mockResponse.getOutputStream()).thenReturn(mockOutputStream);
    }

    @Test
    void testDownloadFile_csvFormat() throws IOException {
        String filePath = "path/to/file.csv";
        InputStream mockInputStream = new ByteArrayInputStream("test data".getBytes());

        doReturn(mockInputStream).when(fileDownloadService).getFileContent(filePath);

        fileDownloadService.downloadFile(mockResponse, ReportFormat.CSV, filePath);

        verify(mockResponse).setContentType("text/csv");
        verify(mockResponse).setHeader("Content-Disposition", "attachment;filename=file.csv");
        verify(mockOutputStream, atLeastOnce()).write(any(byte[].class), anyInt(), anyInt());
    }

    @Test
    void testDownloadFile_xlsFormat() throws IOException {
        String filePath = "path/to/file.xls";
        InputStream mockInputStream = new ByteArrayInputStream("test data".getBytes());

        doReturn(mockInputStream).when(fileDownloadService).getFileContent(filePath);

        fileDownloadService.downloadFile(mockResponse, ReportFormat.XLS, filePath);

        verify(mockResponse).setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        verify(mockResponse).setHeader("Content-Disposition", "attachment;filename=file.xls");
    }

    @Test
    void testDownloadFile_pdfFormat() throws IOException {
        String filePath = "path/to/file.pdf";
        InputStream mockInputStream = new ByteArrayInputStream("test data".getBytes());

        doReturn(mockInputStream).when(fileDownloadService).getFileContent(filePath);

        fileDownloadService.downloadFile(mockResponse, ReportFormat.PDF, filePath);

        verify(mockResponse).setContentType("application/pdf");
        verify(mockResponse).setHeader("Content-Disposition", "attachment;filename=file.pdf");
    }

    @Test
    void testDownloadFile_fileNotFound() {
        String filePath = "path/to/nonexistent/file.csv";

        doThrow(new ReportingException(ErrorConstants.NOT_FOUND_ERROR_CODE, "File not found"))
                .when(fileDownloadService).getFileContent(filePath);

        try {
            fileDownloadService.downloadFile(mockResponse, ReportFormat.CSV, filePath);
        } catch (ReportingException e) {
            assert e.getMessage().contains(ErrorConstants.NOT_FOUND_ERROR_MESSAGE);
        }
    }

    @Test
    void testSetFileResponse_handlesIOException() throws IOException {
        String filePath = "path/to/file.csv";

        when(mockResponse.getOutputStream()).thenThrow(new IOException("IO error"));

        try {
            fileDownloadService.downloadFile(mockResponse, ReportFormat.CSV, filePath);
        } catch (ReportingException e) {
            assert e.getMessage().contains(ErrorConstants.GENERATION_ERROR_MESSAGE);
        }
    }
}






package com.epay.reporting.service;

import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.util.ErrorConstants;
import com.epay.reporting.util.enums.ReportFormat;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;

/**
 * Class Name: FileDownloadService
 * Description: This service defines the logic for downloading files. It handles the processes of preparing,
 * streaming, and sending files in response to a clientâ€™s request. The service ensures efficient file download
 * handling with buffer management and proper error logging.
 * Author: Bhoopendra Rajput
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * Version:1.0
 */
@Service
@RequiredArgsConstructor
public class FileDownloadService {
    private final static int DEFAULT_BUFFER_SIZE = 8192;
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * Building content type and setting file in response.
     *
     * @param httpResponse HttpServletResponse
     * @param reportFormat ReportFormat
     * @param filePath     String
     */
    public void downloadFile(HttpServletResponse httpResponse, ReportFormat reportFormat, String filePath) {
        log.info("Started downloadFile for Report : {}, filePath: {}", reportFormat, filePath);
        String contentType = switch (reportFormat) {
            case CSV -> "text/csv";
            case XLS -> "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            case PDF -> MediaType.APPLICATION_PDF_VALUE;
        };
        setFileResponse(httpResponse, contentType, filePath);
    }

    /**
     * TODO: Temp code: it will replace from S3 code.
     *
     * @param filePath String
     * @return InputStream
     */
    protected InputStream getFileContent(String filePath) {
        log.info("Started getFileContent for filePath: {}", filePath);
        try {
            return new FileInputStream(filePath);
        } catch (IOException e) {
            log.error("Unable to read file {}", filePath, e);
            throw new ReportingException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, filePath));
        }
    }

    /**
     * Setting file name, content type and content in http servlet response.
     *
     * @param response    HttpServletResponse
     * @param contentType String
     * @param filePath    String
     */
    protected void setFileResponse(HttpServletResponse response, String contentType, String filePath) {
        // Write the file content to the response output stream
        log.info("Started setFileResponse for contentType: {}, fileName: {}", contentType, filePath);

        try (InputStream inputStream = new FileInputStream(filePath); ServletOutputStream outputStream = response.getOutputStream()) {
            String fileName = FilenameUtils.getName(filePath);
            setHeader(response, contentType, fileName);
            long length = IOUtils.copy(inputStream, outputStream, DEFAULT_BUFFER_SIZE);
            if (length <= Integer.MAX_VALUE) {
                response.setContentLength((int) length);
            } else {
                response.addHeader("Content-Length", Long.toString(length));
            }
        } catch (IOException e) {
            log.error("Error in setting file content in response", e);
            throw new ReportingException(ErrorConstants.GENERIC_ERROR_CODE, MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, filePath));
        }
    }

    /**
     * Set the response headers for a downloadable file
     * @param response    HttpServletResponse
     * @param contentType String
     * @param fileName    String
     */
    private void setHeader(HttpServletResponse response, String contentType, String fileName) {
        log.info("Started setHeader for contentType: {}, fileName: {}", contentType, fileName);
        response.setContentType(contentType);
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, StringEscapeUtils.escapeJava("attachment;filename=" + fileName));
        HttpHeaders headers = new HttpHeaders();
        ContentDisposition contentDisposition = ContentDisposition.attachment().filename(fileName).build();
        headers.setContentDisposition(contentDisposition);
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, headers.getFirst(HttpHeaders.CONTENT_DISPOSITION));
    }
}

package com.epay.reporting.service;

import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.util.ErrorConstants;
import com.epay.reporting.util.enums.ReportFormat;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class FileDownloadServiceTest {

    private FileDownloadService fileDownloadService;
    private HttpServletResponse mockResponse;

    @BeforeEach
    void setUp() {
        mockResponse = mock(HttpServletResponse.class);
        fileDownloadService = spy(fileDownloadService);
    }

    @Test
    void testDownloadFile_csvFormat() throws IOException {
        String filePath = "path/to/file.csv";

        // Prepare mock InputStream
        InputStream mockInputStream = mock(InputStream.class);
        when(mockInputStream.read(any(byte[].class))).thenReturn(-1); // Simulate end of file

        // Mock FileDownloadService's getFileContent method
        FileDownloadService spyService = spy(fileDownloadService);
        doReturn(mockInputStream).when(spyService).getFileContent(filePath);

        // Test downloadFile with CSV format
        fileDownloadService.downloadFile(mockResponse, ReportFormat.CSV, filePath);

        // Verify header setting logic
        verify(mockResponse).setContentType("text/csv");
        verify(mockResponse).setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=file.csv");
    }

    @Test
    void testDownloadFile_xlsFormat() throws IOException {
        String filePath = "path/to/file.xls";

        // Prepare mock InputStream
        InputStream mockInputStream = mock(InputStream.class);
        when(mockInputStream.read(any(byte[].class))).thenReturn(-1); // Simulate end of file

        // Mock FileDownloadService's getFileContent method
        FileDownloadService spyService = spy(fileDownloadService);
        doReturn(mockInputStream).when(spyService).getFileContent(filePath);

        // Test downloadFile with XLS format
        fileDownloadService.downloadFile(mockResponse, ReportFormat.XLS, filePath);

        // Verify header setting logic
        verify(mockResponse).setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        verify(mockResponse).setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=file.xls");
    }

    @Test
    void testDownloadFile_pdfFormat() throws IOException {
        String filePath = "path/to/file.pdf";

        // Prepare mock InputStream
        InputStream mockInputStream = mock(InputStream.class);
        when(mockInputStream.read(any(byte[].class))).thenReturn(-1); // Simulate end of file

        // Mock FileDownloadService's getFileContent method
        FileDownloadService spyService = spy(fileDownloadService);
        doReturn(mockInputStream).when(spyService).getFileContent(filePath);

        // Test downloadFile with PDF format
        fileDownloadService.downloadFile(mockResponse, ReportFormat.PDF, filePath);

        // Verify header setting logic
        verify(mockResponse).setContentType("application/pdf");
        verify(mockResponse).setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=file.pdf");
    }

    @Test
    void testDownloadFile_fileNotFound() throws IOException {
        String filePath = "path/to/nonexistent/file.csv";

        // Mock the exception that should be thrown when file is not found
        FileDownloadService spyService = spy(fileDownloadService);
        doThrow(new ReportingException(ErrorConstants.NOT_FOUND_ERROR_CODE, "File not found"))
                .when(spyService).getFileContent(filePath);

        // Test downloadFile and expect exception
        try {
            fileDownloadService.downloadFile(mockResponse, ReportFormat.CSV, filePath);
        } catch (ReportingException e) {
            // Check if the error code matches
            assert e.getMessage().contains(ErrorConstants.NOT_FOUND_ERROR_MESSAGE);
        }
    }

    @Test
    void testSetFileResponse_handlesIOException() throws IOException {
        String filePath = "path/to/file.csv";

        // Mock an IOException when trying to open file
        when(mockResponse.getOutputStream()).thenThrow(new IOException("IO error"));

        // Test setting the file response and expect exception
        try {
            fileDownloadService.downloadFile(mockResponse, ReportFormat.CSV, filePath);
        } catch (ReportingException e) {
            assert e.getMessage().contains(ErrorConstants.GENERATION_ERROR_MESSAGE);
        }
    }

 @Test
    void testSetFileResponse_setsCorrectContentLength() throws IOException {
        String filePath = "path/to/file.csv";

        // Create a temporary file to test the behavior
        File tempFile = new File(filePath);
        tempFile.createNewFile(); // Just for testing

        // Mock the file input stream
        InputStream mockInputStream = new FileInputStream(tempFile);
        when(mockResponse.getOutputStream()).thenReturn(mock(ServletOutputStream.class));

        // Test the file response with real content
        fileDownloadService.downloadFile(mockResponse, ReportFormat.CSV, filePath);

        // Clean up after the test
        tempFile.delete();

        // Verify that content length is set
        verify(mockResponse).setContentLength((int) tempFile.length());
    }

}

    fileDownloadService = spy(fileDownloadService);
Cannot invoke "Object.getClass()" because "object" is null
java.lang.NullPointerException: Cannot invoke "Object.getClass()" because "object" is null
	at org.mockito.Mockito.spy(Mockito.java:2192)
	at com.epay.reporting.service.FileDownloadServiceTest.setUp(FileDownloadServiceTest.java:31)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
