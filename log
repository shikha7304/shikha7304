 @PostMapping("/updateStatus")
    @Operation(summary = "Update Order Details")
    public TransactionResponse<String> updateOrderStatus(@Valid @RequestBody OrderUpdateRequest orderUpdateRequest) {
        logger.info("Initiated update order status:",orderUpdateRequest);
        return orderService.updateOrderStatus(orderUpdateRequest);
    }

public class OrderUpdateRequest {

    @JsonProperty("orderRefNumber")
    private String orderRefNumber;
    @NotNull
    @JsonProperty("sbiOrderRefNumber")
    private String sbiOrderRefNumber;
    @NotNull
  //  @Enumerated(EnumType.STRING)
    @JsonProperty("status") // Optional, if you need to map to specific JSON keys
    private String status;
}
 public TransactionResponse<String> updateOrderStatus(OrderUpdateRequest orderUpdateRequest) {
        EPayPrincipal ePayPrincipal= EPayIdentityUtil.getUserPrincipal();

        //Validate request
        orderValidator.validateUpdateOrderRequest(orderUpdateRequest);

        OrderDto orderDto =orderDao.updateOrderStatus(orderUpdateRequest);

        logger.debug("update order status: "+orderDto);
        return TransactionResponse.<String>builder().data(List.of("Order Status updated Successfully.")).status(1).count(1L).build();
    }

    public void validateUpdateOrderRequest(OrderUpdateRequest orderUpdateRequest){
        String OriginalStatus=orderUpdateRequest.getStatus();
        String trimmedStatus=orderUpdateRequest.getStatus().trim();
        // Validate the status format
        if(!OriginalStatus.equals(trimmedStatus))
        {
            throw  new TransactionException(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Order Status"));
        }
        validateOrderStatus(trimmedStatus);
        orderUpdateRequest.setStatus(trimmedStatus);
    }
    private void validateOrderStatus(String orderStatus) {
        if(StringUtils.isNotBlank(orderStatus)) {
            if (!EnumUtils.isValidEnum(OrderStatus.class, orderStatus)) {
                addError(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "orderStatus"));
            }
        }
    }

  public OrderDto updateOrderStatus(OrderUpdateRequest orderUpdateRequest) {

        Order order = orderRepository.findByOrderRefNumberAndSbiOrderRefNumber(orderUpdateRequest.getOrderRefNumber(),orderUpdateRequest.getSbiOrderRefNumber()).orElseThrow(() -> new TransactionException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "Order")));
        order.setStatus(OrderStatus.valueOf(orderUpdateRequest.getStatus()));
        order.setUpdatedBy(order.getMId());
        order.setUpdatedDate(DateTimeUtils.currentTimeMillis());
        Order saveOrder = orderRepository.save(order);
        logger.debug("update order request successfully in DB:{}",saveOrder);
        return  orderMapper.orderToOrderDto(order);
    }



request 

{
    "orderRefNumber": "sbi23d2i",
    "sbiOrderRefNumber": "5EBF1413362543EEA626",
    "status": "@ATTEMPTED"
}


Response 
{
    "status": 0,
    "errors": [
        {
            "errorCode": "409",
            "errorMessage": "No enum constant com.epay.transaction.util.enums.OrderStatus.@ATTEMPTED"
        }
    ]
}

expected response 
Error: 200 â€“ Ok
{
    "status": 0,
    "errors": [
        {
            "errorCode": "3209",
            "errorMessage": "Please Check status format"
        }
    ]
}
