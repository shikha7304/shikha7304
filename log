 /**
     * Generates a key (API or Encryption) for a merchant.
     *
     * @param type  KeyType  The type of key to generate (API or Encryption).
     * @param keyGenerationRequest KeyGenerationRequest Request body containing key generation details.
     * @param response  HttpServletResponse  HTTP response object for sending the generated file.
     */
    @PostMapping("/generation/{type}")
    @Operation(summary = "Generate the API and Encryption Key for a Merchant.", description = "Generate the API and Encryption Key for a Merchant.")
    @ApiResponses({@ApiResponse(responseCode = "200", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = MerchantResponse.class ))})})
    public void generateKey(@PathVariable("type") KeyType type, @RequestBody KeyGenerationRequest keyGenerationRequest, HttpServletResponse response) {
        logger.info("Started generateKey for Key type: {}", type);
        keyService.generateKey(type, keyGenerationRequest, response);
    }

  /**
     * Validates an API key against the database.
     *
     * @param apiKeyValidationRequest APIKeyValidationRequest Request body containing API key validation details.
     * @return MerchantResponse containing validation status.
     */
    @PostMapping("/validated/api")
    @Operation(summary = "Validate API Keys for Given MID", description = "Validate API Keys for Given MID")
    @ApiResponses({@ApiResponse(responseCode = "200", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = MerchantResponse.class ))})})
    public MerchantResponse<String> validatedAPIKey(@RequestBody @Valid APIKeyValidationRequest apiKeyValidationRequest) {
        logger.info("Started validatedAPIKey for request: {}", apiKeyValidationRequest);
        return keyService.validatedAPIKey(apiKeyValidationRequest);
    }

 @GetMapping("/{mId}/{keyType}")
    @Operation(summary = "Get list of keys for given MID", description = "Get list of keys for given MID")
    @ApiResponses({@ApiResponse(responseCode = "200", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = MerchantResponse.class ))})})
    public MerchantResponse<KMSKeyResponse> getKeysByMerchant(@PathVariable("keyType") KeyType keyType, @Parameter(description = "Merchant ID for which encryption keys are to be fetched.", required = true) @PathVariable("mId") String mId,  @PageableDefault(size = 50, page = 0) Pageable pageable) {
        logger.info(" Fetching list of Keys for for mId: {}, keyType: {}", mId, keyType);
        return keyService.getKeysByMerchant(keyType, mId, pageable);
    }

public enum KeyType {
   API,ENCRYPTION
}
