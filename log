import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.*;

@ExtendWith(MockitoExtension.class)
class MerchantUserServiceTest {

    @Mock
    private MerchantInfoDao merchantInfoDao;

    @Mock
    private MerchantMapper merchantMapper;

    @Mock
    private MerchantUserDao merchantUserDao;

    @InjectMocks
    private MerchantUserService merchantUserService;

    private MerchantUserDto merchantUserDto;
    private MerchantInfoDto merchantInfoDto;
    private UserMenuPermissionEntityResponse menuResponse;

    @BeforeEach
    void setUp() {
        merchantUserDto = new MerchantUserDto();
        merchantUserDto.setId(UUID.randomUUID());
        merchantUserDto.setParentUserId(UUID.randomUUID());  // Ensuring the parent user is not null

        merchantInfoDto = new MerchantInfoDto();
        
        menuResponse = new UserMenuPermissionEntityResponse();
        menuResponse.setMenuCode("MENU_1");
    }

    @Test
    void testGetParentAssignedMIds_WhenParentHasMIDs() {
        // Mock Parent Assigned MIDs (non-empty)
        List<MerchantInfoDto> parentAssignedMids = List.of(merchantInfoDto);
        when(merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(any(UUID.class))).thenReturn(parentAssignedMids);
        when(merchantMapper.mapMerchantInfoDTOListToResponseList(any())).thenReturn(List.of(new MerchantInfoResponse()));

        List<MerchantInfoResponse> response = merchantUserService.getParentAssignedMIds(merchantUserDto, List.of());
        assertNotNull(response);
        assertFalse(response.isEmpty());
    }

    @Test
    void testGetParentAssignedMIds_WhenNoParentAssignedMIDs() {
        when(merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(any(UUID.class))).thenReturn(Collections.emptyList());

        List<MerchantInfoResponse> response = merchantUserService.getParentAssignedMIds(merchantUserDto, List.of());
        assertNotNull(response);
        assertTrue(response.isEmpty());
    }

    @Test
    void testGetParentAssignedMIds_WhenUserHasNoParent() {
        merchantUserDto.setParentUserId(null); // Setting Parent User ID to null
        List<MerchantInfoResponse> response = merchantUserService.getParentAssignedMIds(merchantUserDto, List.of());
        
        assertNotNull(response);
        assertTrue(response.isEmpty());  // Since the parent ID is null, no processing should happen
    }

    @Test
    void testGetParentAssignedMIds_WhenParentHasAssignedMIDsThatAreAlreadyAssigned() {
        // Parent has one assigned MID, which is already assigned to the user
        when(merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(any(UUID.class))).thenReturn(List.of(merchantInfoDto));

        // Mock the assigned list containing the same MID
        List<MerchantInfoResponse> response = merchantUserService.getParentAssignedMIds(merchantUserDto, List.of(merchantInfoDto));

        assertNotNull(response);
        assertTrue(response.isEmpty());  // Since it's already assigned, removeAll should empty the list
    }

    @Test
    void testGetParentAssignedMenus_WhenParentHasMenus() {
        when(merchantUserDao.getUserMenuPermission(any(UUID.class))).thenReturn(List.of(menuResponse));

        List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of());
        
        assertNotNull(response);
        assertFalse(response.isEmpty());
    }

    @Test
    void testGetParentAssignedMenus_WhenParentHasNoMenus() {
        when(merchantUserDao.getUserMenuPermission(any(UUID.class))).thenReturn(Collections.emptyList());

        List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of());

        assertNotNull(response);
        assertTrue(response.isEmpty());
    }

    @Test
    void testGetParentAssignedMenus_WhenUserHasNoParent() {
        merchantUserDto.setParentUserId(null);

        List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of());

        assertNotNull(response);
        assertTrue(response.isEmpty());
    }

    @Test
    void testGetParentAssignedMenus_WhenParentMenusAlreadyAssigned() {
        // Parent has a menu, and the user already has the same menu assigned
        when(merchantUserDao.getUserMenuPermission(any(UUID.class))).thenReturn(List.of(menuResponse));

        List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of(menuResponse));

        assertNotNull(response);
        assertTrue(response.isEmpty());  // The loop should remove it since it's already assigned
    }

    @Test
    void testGetParentAssignedMenus_WhenParentHasMenusNotAssignedToUser() {
        // Parent has two menus, user has one assigned
        UserMenuPermissionEntityResponse parentMenu2 = new UserMenuPermissionEntityResponse();
        parentMenu2.setMenuCode("MENU_2");

        when(merchantUserDao.getUserMenuPermission(any(UUID.class))).thenReturn(List.of(menuResponse, parentMenu2));

        List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of(menuResponse));

        assertNotNull(response);
        assertEquals(1, response.size());
        assertEquals("MENU_2", response.get(0).getMenuCode());  // MENU_2 should be the only unassigned menu
    }
}





@Test
    void testGetParentAssignedMIds() {
        when(merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(any(UUID.class))).thenReturn(List.of(merchantInfoDto));
        when(merchantMapper.mapMerchantInfoDTOListToResponseList(any())).thenReturn(List.of(new MerchantInfoResponse()));

        List<MerchantInfoResponse> response = merchantUserService.getParentAssignedMIds(merchantUserDto, List.of(merchantInfoDto));
        assertNotNull(response);

    }

    @Test
    void testGetParentAssignedMenus() {
        when(merchantUserDao.getUserMenuPermission(any(UUID.class))).thenReturn(List.of(menuResponse));
        List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of(menuResponse));
        assertNotNull(response);
    }





protected List<MerchantInfoResponse> getParentAssignedMIds(MerchantUserDto merchantUser, List<MerchantInfoDto> assignedMIds) {
        log.info("Fetching unassigned MIDs for user ID: {}", merchantUser.getId());
        List<MerchantInfoResponse> unAssignedMerchantInfo = new ArrayList<>();

        if (ObjectUtils.isNotEmpty(merchantUser.getParentUserId())) {
            //Step 2: Get Parent Assigned MIDs List
            List<MerchantInfoDto> parentAssignedMIds = merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(merchantUser.getParentUserId());

            //Step 3: Remove Assigned MIDs List from Parent Assigned MIDs List
            parentAssignedMIds.removeAll(assignedMIds);
            if (CollectionUtils.isNotEmpty(parentAssignedMIds)) {
                unAssignedMerchantInfo.addAll(merchantMapper.mapMerchantInfoDTOListToResponseList(parentAssignedMIds));
            }
        }
        log.info("Successfully fetched unassigned MIDs for user ID: {}", merchantUser.getId());
        return unAssignedMerchantInfo;
    }

    /**
     * Retrieves the unassigned menus for a specified user by comparing the parent's
     * accessible menus with the user's currently assigned menus.
     *
     * @param merchantUser Merchant user details.
     * @param assignedMenus List of currently assigned menus for the user.
     * @return List of unassigned menus available for the user.
     */
    protected List<UserMenuPermissionEntityResponse> getParentAssignedMenus(MerchantUserDto merchantUser, List<UserMenuPermissionEntityResponse> assignedMenus) {
        log.info("Fetching unassigned menus for user ID: {}", merchantUser.getId());
        List<UserMenuPermissionEntityResponse> unAssignedMerchantInfo = new ArrayList<>();

        if (ObjectUtils.isNotEmpty(merchantUser.getParentUserId())) {
            //Step 2: Get Parent Assigned MIDs List
            List<UserMenuPermissionEntityResponse> parentAssignedMenus = merchantUserDao.getUserMenuPermission(merchantUser.getParentUserId());

            //Step 3: Remove Assigned MIDs List from Parent Assigned MIDs List
            parentAssignedMenus.removeAll(assignedMenus);
            for (UserMenuPermissionEntityResponse p : parentAssignedMenus) {
                boolean isFound = false;
                for (UserMenuPermissionEntityResponse a : assignedMenus) {
                    if (a.getMenuCode().equalsIgnoreCase(p.getMenuCode())) {
                        isFound = true;
                        break;
                    }
                }
                if(!isFound) {
                    unAssignedMerchantInfo.add(p);
                }
            }
        }
        log.info("Successfully fetched unassigned menus for user ID: {}", merchantUser.getId());
        return unAssignedMerchantInfo;
    }
