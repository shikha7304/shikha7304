 @Test
    void testGetAllClaimsFromToken_ValidToken() {
        Claims claims = Jwts.claims();
        claims.put("username", "testUser");
        claims.put("type", "ACCESS");
        claims.setIssuer(issuer);
        claims.setExpiration(new Date(System.currentTimeMillis() + 10000));

        String token = Jwts.builder().setClaims(claims).signWith(Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey)), SignatureAlgorithm.HS512).compact();
        String username = "testUser";
        EPayPrincipal mockUser = new EPayPrincipal();
        when(authenticationUserService.loadUserByUserName(username)).thenReturn(Optional.of(mockUser));

        Claims resultClaims = jwtService.verifyJwtTokenAndGetClaims(token);

        assertNotNull(resultClaims);
        assertEquals("testUser", resultClaims.get("username"));
    }
 protected Claims getAllClaimsFromToken(String token) {
        try {
            logger.info("ClassName - JwtService,MethodName - getAllClaimsFromToken, getting all claims from token.");
            return Jwts.parserBuilder().setSigningKey(getSignKey()).build().parseClaimsJws(token).getBody();
        } catch (ExpiredJwtException e) {
            logger.error("Jwt Token is expired : {}", e.getLocalizedMessage());
            throw new IllegalStateException(EPayAuthenticationErrorConstants.TOKEN_EXPIRED);
        }  catch (SignatureException e) {
            logger.error("Jwt Token is expired : {}", e.getLocalizedMessage());
            throw new IllegalStateException(EPayAuthenticationErrorConstants.INVALID_TOKEN);
       }
