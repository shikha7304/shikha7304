package com.epay.merchant.controller;

import com.epay.merchant.externalservice.response.KMSEncryptionKeysResponse;
import com.epay.merchant.externalservice.response.KMSKeyResponse;
import com.epay.merchant.model.request.APIKeyValidationRequest;
import com.epay.merchant.model.request.KeyGenerationRequest;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.service.KeyService;
import com.epay.merchant.util.enums.KeyType;
import io.swagger.v3.oas.annotations.Operation;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;


/**
 * Class Name: MerchantController
 * *
 * Description:
 * *
 * Author: V1017903(bhushan wadekar)
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */

@RestController
@RequiredArgsConstructor
@RequestMapping("/key")
@Validated
public class KeyController {

    private final KeyService keyService;

    /**
     * Generates a key (API or Encryption) for a merchant.
     *
     * @param type  KeyType  The type of key to generate (API or Encryption).
     * @param keyGenerationRequest KeyGenerationRequest Request body containing key generation details.
     * @param response  HttpServletResponse  HTTP response object for sending the generated file.
     */
    @PostMapping("/generation/{type}")
    @Operation(summary = "Generate the API and Encryption Key for a Merchant.", description = "Generate the API and Encryption Key for a Merchant.")
    public void generateKey(@PathVariable("type") KeyType type, @RequestBody KeyGenerationRequest keyGenerationRequest, HttpServletResponse response) {
        keyService.generateKey(type, keyGenerationRequest, response);
    }

    /**
     * Validates an API key against the database.
     *
     * @param apiKeyValidationRequest APIKeyValidationRequest Request body containing API key validation details.
     * @return MerchantResponse containing validation status.
     */
    @PostMapping("/validated/api")
    @Operation(summary = "Validate API Keys for Given MID", description = "Validate API Keys for Given MID")
    public MerchantResponse<String> validatedAPIKey(@RequestBody @Valid APIKeyValidationRequest apiKeyValidationRequest) {
        return keyService.validatedAPIKey(apiKeyValidationRequest);
    }

    /**
     * Fetches encryption keys for the given merchant ID.
     *
     * @param mId String Merchant ID for which encryption keys are to be fetched.
     * @return MerchantResponse containing encryption key details.
     */
    @GetMapping("/encryption/{mId}")
    @Operation(summary = "Get Encryption Keys for Given MID", description = "Get Encryption Keys for Given MID")
    public MerchantResponse<KMSEncryptionKeysResponse> getMerchantEncryptionKeys(@PathVariable String mId) {
        return keyService.getMerchantEncryptionKeys(mId);
    }

    /**
     * Retrieves a list of keys for the given merchant ID and key type.
     *
     * @param keyType KeyType Key type to filter (API or Encryption).
     * @param mId String    Merchant ID for which keys are to be fetched.
     * @param pageable Pageable object for pagination support.
     * @return MerchantResponse containing the list of keys.
     */
    @GetMapping("/{mId}/{keyType}")
    @Operation(summary = "Get list of keys for given MID", description = "Get list of keys for given MID")
    public MerchantResponse<KMSKeyResponse> getKeysByMerchant(@PathVariable("keyType") KeyType keyType, @PathVariable("mId") String mId,  @PageableDefault(size = 50, page = 0) Pageable pageable) {
        return keyService.getKeysByMerchant(keyType, mId, pageable);
    }


}
package com.epay.merchant.service;

import com.epay.merchant.dao.KeyDao;
import com.epay.merchant.document.pdf.APIKeyPDFBuilder;
import com.epay.merchant.document.pdf.EncryptionKeyPDFBuilder;
import com.epay.merchant.document.pdf.PDFService;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.externalservice.response.KMSAPIKeysResponse;
import com.epay.merchant.externalservice.response.KMSEncryptionKeysResponse;
import com.epay.merchant.externalservice.response.KMSKeyResponse;
import com.epay.merchant.model.request.APIKeyValidationRequest;
import com.epay.merchant.model.request.KeyGenerationRequest;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.PasswordGenerator;
import com.epay.merchant.util.enums.KeyType;
import com.epay.merchant.validator.KeyValidator;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Arrays;


/**
 * Class Name: MerchantService
 * *
 * Description:
 * *
 * Author: V1017903(bhushan wadekar)
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */

@Service
@RequiredArgsConstructor
public class KeyService {

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());
    private final KeyValidator keyValidator;
    private final KeyDao keyDao;
    private final PasswordGenerator passwordGenerator;

    /**
     * Handles the generation of keys (API or Encryption) for merchants.
     * Logs details about the key generation process and errors, if any.
     *
     * @param type  KeyType The type of key to generate (API or Encryption).
     * @param keyGenerationRequest keyGenerationRequest Request body containing key generation details.
     * @param response HttpServletResponse HTTP response object for sending the generated file.
     */
    public void generateKey(KeyType type, KeyGenerationRequest keyGenerationRequest, HttpServletResponse response) {
        ByteArrayOutputStream pdfStream;
        // Step 1 : Validate the KMSKeyGenerationRequest
        keyValidator.validateKeyGenerationRequest(keyGenerationRequest);
        switch (type) {
            case API -> pdfStream = apiKeyGeneration(keyGenerationRequest);
            case ENCRYPTION -> pdfStream = encryptionKeyGeneration(keyGenerationRequest);
            default ->
                    throw new MerchantException(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "KeyType", "Valid Key Type are " + Arrays.toString(KeyType.values())));
        }
        fileResponse(type, keyGenerationRequest, response, pdfStream);
    }

    /**
     * Validates an API key and returns the validation status.
     * Logs the validation process and potential errors.
     *
     * @param apiKeyValidationRequest APIKeyValidationRequest Request body containing API key validation details.
     * @return MerchantResponse containing validation status.
     */
    public MerchantResponse<String> validatedAPIKey(APIKeyValidationRequest apiKeyValidationRequest) {
        keyValidator.validateAPIKeyValidationRequest(apiKeyValidationRequest);
        return keyDao.validatedAPIKey(apiKeyValidationRequest);
    }

    /**
     * Retrieves encryption keys for a given merchant ID.
     * Logs the retrieval process and potential errors.
     *
     * @param mId String Merchant ID for which encryption keys are fetched.
     * @return MerchantResponse containing encryption key details.
     */
    public MerchantResponse<KMSEncryptionKeysResponse> getMerchantEncryptionKeys(String mId) {
        keyValidator.validateMId(mId);
        return keyDao.getMerchantEncryptionKeys(mId);
    }
    /**
     * This method generates an encryption key and creates a password-protected PDF file.
     * @param keyGenerationRequest KeyGenerationRequest The request object containing key generation details
     * @return  ByteArrayOutputStream containing the generated PDF file
     */
    private ByteArrayOutputStream encryptionKeyGeneration(KeyGenerationRequest keyGenerationRequest) {
        // Step 1 : Call the KMS APIs
        KMSEncryptionKeysResponse kmsEncryptionKeysResponse = keyDao.generateEncryptionKey(keyGenerationRequest);
        // Step 2 : Generate the Password-protected PDF File
        String password = passwordGenerator.generatePassword();
        ByteArrayOutputStream byteArrayOutputStream = PDFService.generatePDF(new EncryptionKeyPDFBuilder(), kmsEncryptionKeysResponse.getMek(), password);
        // Step 3 : Send Notification to Merchant
        keyDao.saveNotification(KeyType.ENCRYPTION, kmsEncryptionKeysResponse.getId(), "Encryption Key PDF file Password is :" + password, keyGenerationRequest.getMId());
        return byteArrayOutputStream;
    }

    /**
     * This method generates an API Key and creates a password-protected PDF file.
     * @param keyGenerationRequest KeyGenerationRequest The request object containing API key generation details
     * @return  ByteArrayOutputStream containing the generated PDF file
     */
    private ByteArrayOutputStream apiKeyGeneration(KeyGenerationRequest keyGenerationRequest) {
        // Step 1 : Call the KMS APIs
        KMSAPIKeysResponse kmsapiKeysResponse = keyDao.generateApiKey(keyGenerationRequest.getMId());
        // Step 2 : Generate the Password-protected PDF File
        String password = passwordGenerator.generatePassword();
        ByteArrayOutputStream byteArrayOutputStream = PDFService.generatePDF(new APIKeyPDFBuilder(), kmsapiKeysResponse, password);
        // Step 3 : Send Notification to Merchant
        keyDao.saveNotification(KeyType.API, kmsapiKeysResponse.getId(), "API Key PDF File Password is :" + password, keyGenerationRequest.getMId());
        return byteArrayOutputStream;
    }
    /**
     * Fetches the keys associated with a given merchant ID and key type.
     * Logs the retrieval process and any errors encountered.
     *
     * @param keyType Key type to filter (API or Encryption).
     * @param mId String Merchant ID for which keys are fetched.
     * @param pageable Pageable object for pagination.
     * @return MerchantResponse containing the list of keys.
     */
    public MerchantResponse<KMSKeyResponse> getKeysByMerchant(KeyType keyType, String mId, Pageable pageable) {
        return keyDao.getKeysByMerchant(keyType, mId, pageable);
    }

    /**
     * This method writes the generated PDF file to the HTTP response.
     * @param keyGenerationRequest KeyGenerationRequest  The request object containing key generation details
     * @param type KeyType The type of key to generate (API or Encryption).
     * @param response HttpServletResponse the HttpServletResponse to send the PDF file
     * @param pdfStream ByteArrayOutputStream  containing the generated PDF data
     */
    private void fileResponse(KeyType type, KeyGenerationRequest keyGenerationRequest, HttpServletResponse response, ByteArrayOutputStream pdfStream) {
        try {
            HttpHeaders headers = new HttpHeaders();
            ContentDisposition contentDisposition = ContentDisposition.attachment().filename(type.name() + "_" + keyGenerationRequest.getMId() + "_" + System.currentTimeMillis() + ".pdf").build();
            headers.setContentDisposition(contentDisposition);
            response.setContentType(MediaType.APPLICATION_PDF_VALUE);
            response.setHeader(HttpHeaders.CONTENT_DISPOSITION, headers.getFirst(HttpHeaders.CONTENT_DISPOSITION));
            response.getOutputStream().write(pdfStream.toByteArray());
            response.getOutputStream().flush();
        } catch (IOException e) {
            logger.error("Error in PDF File Generation ", e);
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, type.name() + "Key"));
        }
    }

}
