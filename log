

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MerchantController {

    @GetMapping("/access/{userName}/{mId}")
    @Operation(summary = "Merchant User MID Access validation for Logged-in User")
    @ApiResponses({
        @ApiResponse(responseCode = "200", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)))
    })
    public MerchantResponse<String> validateMIdAccess(
            @Parameter(description = "Username of the logged-in user", required = true)
            @PathVariable String userName,
            @Parameter(description = "MID of the merchant to be validated", required = true)
            @PathVariable String mId) {

        log.info("Received request for MID access validation for user: {} and MID: {}", userName, mId);
        return validationService.validateMId(userName, mId);
    }

    @GetMapping("/access/active/{userName}/{mId}")
    @Operation(summary = "Merchant User MID Access validation and Check MID Active Status for Logged-in User")
    @ApiResponses({
        @ApiResponse(responseCode = "200", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)))
    })
    public MerchantResponse<String> validateActiveMIdAccess(
            @Parameter(description = "Username of the logged-in user", required = true)
            @PathVariable String userName,
            @Parameter(description = "MID of the merchant to be validated and checked for active status", required = true)
            @PathVariable String mId) {

        log.info("Received request for MID access validation and active status check for user: {} and MID: {}", userName, mId);
        return validationService.validateActiveMId(userName, mId);
    }
}







/**
 * API endpoint to validate merchant ID (MID) to check if it exists and is active.
 * @param mId Merchant ID of the user to be validated.
 * @return MerchantResponse containing the validation result (true if valid, false otherwise).
 */
@GetMapping("validate/{mId}")
@Operation(summary = "API to validate MID", description = "MID Validation during Login")
public MerchantResponse<Boolean> validateMid(@PathVariable String mId) {
    log.info("Received request to validate MID: {}", mId);
    MerchantResponse<Boolean> response = merchantUserService.validateMId(mId);
    log.info("Validation result for MID {}: {}", mId, response.getData());
    return response;
}

/**
 * Service method to validate if the given MID exists and is active.
 * @param mId Merchant ID to be validated.
 * @return MerchantResponse containing the validation result (true if valid, false otherwise).
 */
public MerchantResponse<Boolean> validateMId(String mId) {
    log.info("Starting validation for MID: {}", mId);
    
    // Step 1: Validate mandatory fields
    log.info("Validating mandatory fields for MID: {}", mId);
    merchantUserValidator.validateMid(mId);

    // Step 2: Check if MID exists and is active
    log.info("Checking if MID {} exists and is active", mId);
    boolean isExists = merchantInfoDao.isExistsByMIdAndStatus(mId, MerchantStatus.ACTIVE.name());
    
    log.info("Completed validation for MID: {}. Exists and active: {}", mId, isExists);
    return MerchantResponse.<Boolean>builder()
            .status(MerchantConstant.RESPONSE_SUCCESS)
            .data(List.of(isExists))
            .build();
}

/**
 * Validates the given MID to ensure it meets mandatory requirements.
 * @param mId Merchant ID to be validated.
 * @throws ValidationException if mandatory fields are missing or invalid.
 */
public void validateMid(String mId) {
    log.info("Performing mandatory field validation for MID: {}", mId);
    errorDtoList = new ArrayList<>();
    checkMandatoryField(mId, VALID_MID);

    if (!errorDtoList.isEmpty()) {
        log.error("Validation errors found for MID: {}", mId);
    }
    
    throwIfErrors();
}






/**
     * Validate MID to check if its exists and active
     * @param  mId of the merchant user.
     * @return MerchantResponse
     */
    @GetMapping("validate/{mId}")
    @Operation(summary = "API to validate mid", description = "Mid Validation during Login")
    public MerchantResponse<Boolean> validateMid (@PathVariable String mId) {
        log.info("Received request to validate Mid: {}",mId);
        return merchantUserService.validateMId(mId);
    }


  public MerchantResponse<Boolean> validateMId(String mId) {
        log.info("Validate mId: {}",mId);
        //Step 2 : Check mandatory fields
        merchantUserValidator.validateMid(mId);
        log.info("started mId validation for user: {}",mId);
        //Step 1  : Check if mId exists
        boolean isExists = merchantInfoDao.isExistsByMIdAndStatus(mId, MerchantStatus.ACTIVE.name());
        log.info("Returning merchant response for mid: {}",mId);
        return MerchantResponse.<Boolean>builder().status(MerchantConstant.RESPONSE_SUCCESS).data(List.of(isExists)).build();
    }

public void validateMid(String mId ) {
        errorDtoList = new ArrayList<>();
        checkMandatoryField(mId,VALID_MID );
        throwIfErrors();
    }
