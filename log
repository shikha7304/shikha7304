import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.Mockito;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;

class HashingServiceTest {

    @Test
    void testGenerateHashSuccess() throws EncryptionDecryptionException {
        String input = "TestData";
        byte[] inputData = input.getBytes(StandardCharsets.UTF_8);
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        byte[] hashedData = HashingService.generateHash(inputData, algorithm);
        assertNotNull(hashedData);
        assertTrue(hashedData.length > 0);
    }

    @Test
    void testGenerateHashWithNullDataThrowsException() {
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(null, algorithm));
    }

    @Test
    void testGenerateHashWithNullAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(inputData, null));
    }

    @Test
    void testGenerateHashWithInvalidAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        // Use Mockito to return an invalid algorithm name, triggering NoSuchAlgorithmException
        HashAlgorithm invalidAlgorithm = Mockito.mock(HashAlgorithm.class);
        Mockito.when(invalidAlgorithm.getAlgorithmName()).thenReturn("INVALID_ALGORITHM");

        EncryptionDecryptionException exception = assertThrows(
            EncryptionDecryptionException.class,
            () -> HashingService.generateHash(inputData, invalidAlgorithm)
        );

        assertEquals(EncryptionDecryptionConstants.INVALID_ERROR_CODE, exception.getErrorCode());
    }

    @Test
    void testGenerateHashWithGenericException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        // Use Mockito to force a RuntimeException when getAlgorithmName() is called
        HashAlgorithm algorithm = Mockito.mock(HashAlgorithm.class);
        Mockito.when(algorithm.getAlgorithmName()).thenThrow(new RuntimeException("Unexpected error"));

        EncryptionDecryptionException exception = assertThrows(
            EncryptionDecryptionException.class,
            () -> HashingService.generateHash(inputData, algorithm)
        );

        assertEquals(EncryptionDecryptionConstants.GENERIC_ERROR_CODE, exception.getErrorCode());
    }
}







import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class HashingServiceTest {

    @Test
    void testGenerateHashSuccess() throws EncryptionDecryptionException {
        String input = "TestData";
        byte[] inputData = input.getBytes(StandardCharsets.UTF_8);
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        byte[] hashedData = HashingService.generateHash(inputData, algorithm);
        assertNotNull(hashedData);
        assertTrue(hashedData.length > 0);
    }

    @Test
    void testGenerateHashWithNullDataThrowsException() {
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(null, algorithm));
    }

    @Test
    void testGenerateHashWithNullAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(inputData, null));
    }

    @Test
    void testGenerateHashWithInvalidAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        // Using reflection to pass an invalid algorithm name (forcing NoSuchAlgorithmException)
        HashAlgorithm invalidAlgorithm = HashAlgorithm.SHA_256; // Just for reference, we override below
        HashAlgorithm spyAlgorithm = new HashAlgorithm() {
            @Override
            public String getAlgorithmName() {
                return "INVALID_ALGORITHM";
            }
        };

        EncryptionDecryptionException exception = assertThrows(
            EncryptionDecryptionException.class,
            () -> HashingService.generateHash(inputData, spyAlgorithm)
        );

        assertEquals(EncryptionDecryptionConstants.INVALID_ERROR_CODE, exception.getErrorCode());
    }

    @Test
    void testGenerateHashWithGenericException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        HashAlgorithm algorithm = HashAlgorithm.SHA_256;

        // Mock MessageDigest to throw a RuntimeException
        try {
            MessageDigest mockDigest = MessageDigest.getInstance(algorithm.getAlgorithmName()) {
                @Override
                public byte[] digest(byte[] input) {
                    throw new RuntimeException("Unexpected error");
                }
            };

            EncryptionDecryptionException exception = assertThrows(
                EncryptionDecryptionException.class,
                () -> mockDigest.digest(inputData) // Simulating inside generateHash
            );

            assertEquals(EncryptionDecryptionConstants.GENERIC_ERROR_CODE, exception.getErrorCode());

        } catch (NoSuchAlgorithmException e) {
            fail("Test setup failed: Could not instantiate MessageDigest");
        }
    }
}






import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;

class HashingServiceTest {

    @Test
    void testGenerateHashSuccess() throws EncryptionDecryptionException {
        String input = "TestData";
        byte[] inputData = input.getBytes(StandardCharsets.UTF_8);
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        byte[] hashedData = HashingService.generateHash(inputData, algorithm);
        assertNotNull(hashedData);
        assertTrue(hashedData.length > 0);
    }

    @Test
    void testGenerateHashWithNullDataThrowsException() {
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(null, algorithm));
    }

    @Test
    void testGenerateHashWithNullAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(inputData, null));
    }

    @Test
    void testGenerateHashWithInvalidAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        HashAlgorithm invalidAlgorithm = new HashAlgorithm("INVALID"); // Simulating an invalid algorithm
        EncryptionDecryptionException exception = assertThrows(
            EncryptionDecryptionException.class,
            () -> HashingService.generateHash(inputData, invalidAlgorithm)
        );

        assertEquals(EncryptionDecryptionConstants.INVALID_ERROR_CODE, exception.getErrorCode());
    }

    @Test
    void testGenerateHashWithGenericException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        HashAlgorithm algorithm = new HashAlgorithm("") { // Simulating a failure scenario
            @Override
            public String getAlgorithmName() {
                throw new RuntimeException("Unexpected error");
            }
        };

        EncryptionDecryptionException exception = assertThrows(
            EncryptionDecryptionException.class,
            () -> HashingService.generateHash(inputData, algorithm)
        );

        assertEquals(EncryptionDecryptionConstants.GENERIC_ERROR_CODE, exception.getErrorCode());
    }
}







public static byte[] generateHash(byte @NonNull [] data, @NonNull HashAlgorithm algorithm) throws EncryptionDecryptionException {
        try {
            log.debug("HashingService :: generateHash  data {}, algorithm {}", data, algorithm);
            MessageDigest digest = MessageDigest.getInstance(algorithm.getAlgorithmName());
            return digest.digest(data);
        } catch (NoSuchAlgorithmException e) {
            log.error("HashingService :: generateHash {}", e);
            throw new EncryptionDecryptionException(EncryptionDecryptionConstants.INVALID_ERROR_CODE, MessageFormat.format(EncryptionDecryptionConstants.INVALID_ERROR_MESSAGE, "hash algorithm"));
        } catch (Exception e) {
            log.error("HashingService :: generateHash {}", e);
            throw new EncryptionDecryptionException(EncryptionDecryptionConstants.GENERIC_ERROR_CODE, EncryptionDecryptionConstants.GENERIC_ERROR_MESSAGE);
        }
    }

}
public class HashingServiceTest {

    @Test
    void testGenerateHashSuccess() throws EncryptionDecryptionException {
        String input = "TestData";
        byte[] inputData = input.getBytes(StandardCharsets.UTF_8);
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        byte[] hashedData = HashingService.generateHash(inputData, algorithm);
        assertNotNull(hashedData);
        assertTrue(hashedData.length > 0);
    }



    @Test
    void testGenerateHashWithNullDataThrowsException() {
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(null, algorithm));
    }

    @Test
    void testGenerateHashWithNullAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        assertThrows(NullPointerException.class, () -> HashingService.generateHash(inputData, null));
    }


}






public static byte[] generateHash(byte @NonNull [] data, @NonNull HashAlgorithm algorithm) throws EncryptionDecryptionException {
        try {
            log.debug("HashingService :: generateHash  data {}, algorithm {}", data, algorithm);
            MessageDigest digest = MessageDigest.getInstance(algorithm.getAlgorithmName());
            return digest.digest(data);
        } catch (NoSuchAlgorithmException e) {
            log.error("HashingService :: generateHash {}", e);
            throw new EncryptionDecryptionException(EncryptionDecryptionConstants.INVALID_ERROR_CODE, MessageFormat.format(EncryptionDecryptionConstants.INVALID_ERROR_MESSAGE, "hash algorithm"));
        } catch (Exception e) {
            log.error("HashingService :: generateHash {}", e);
            throw new EncryptionDecryptionException(EncryptionDecryptionConstants.GENERIC_ERROR_CODE, EncryptionDecryptionConstants.GENERIC_ERROR_MESSAGE);
        }
    }

}
public class HashingServiceTest {

    @Test
    void testGenerateHashSuccess() throws EncryptionDecryptionException {
        String input = "TestData";
        byte[] inputData = input.getBytes(StandardCharsets.UTF_8);
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        byte[] hashedData = HashingService.generateHash(inputData, algorithm);
        assertNotNull(hashedData);
        assertTrue(hashedData.length > 0);
    }



    @Test
    void testGenerateHashWithNullDataThrowsException() {
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(null, algorithm));
    }

    @Test
    void testGenerateHashWithNullAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        assertThrows(NullPointerException.class, () -> HashingService.generateHash(inputData, null));
    }


}

