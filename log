    public static byte[] generateHash(byte @NonNull [] data, @NonNull HashAlgorithm algorithm) throws EncryptionDecryptionException {
        try {
            log.debug("HashingService :: generateHash  data {}, algorithm {}", data, algorithm);
            MessageDigest digest = MessageDigest.getInstance(algorithm.getAlgorithmName());
            return digest.digest(data);
        } catch (NoSuchAlgorithmException e) {
            log.error("HashingService :: generateHash {}", e);
            throw new EncryptionDecryptionException(EncryptionDecryptionConstants.INVALID_ERROR_CODE, MessageFormat.format(EncryptionDecryptionConstants.INVALID_ERROR_MESSAGE, "hash algorithm"));
        } catch (Exception e) {
            log.error("HashingService :: generateHash {}", e);
            throw new EncryptionDecryptionException(EncryptionDecryptionConstants.GENERIC_ERROR_CODE, EncryptionDecryptionConstants.GENERIC_ERROR_MESSAGE);
        }
    }

}
public class HashingServiceTest {

    @Test
    void testGenerateHashSuccess() throws EncryptionDecryptionException {
        String input = "TestData";
        byte[] inputData = input.getBytes(StandardCharsets.UTF_8);
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        byte[] hashedData = HashingService.generateHash(inputData, algorithm);
        assertNotNull(hashedData);
        assertTrue(hashedData.length > 0);
    }



    @Test
    void testGenerateHashWithNullDataThrowsException() {
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(null, algorithm));
    }

    @Test
    void testGenerateHashWithNullAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        assertThrows(NullPointerException.class, () -> HashingService.generateHash(inputData, null));
    }


}






public static byte[] generateHash(byte @NonNull [] data, @NonNull HashAlgorithm algorithm) throws EncryptionDecryptionException {
        try {
            log.debug("HashingService :: generateHash  data {}, algorithm {}", data, algorithm);
            MessageDigest digest = MessageDigest.getInstance(algorithm.getAlgorithmName());
            return digest.digest(data);
        } catch (NoSuchAlgorithmException e) {
            log.error("HashingService :: generateHash {}", e);
            throw new EncryptionDecryptionException(EncryptionDecryptionConstants.INVALID_ERROR_CODE, MessageFormat.format(EncryptionDecryptionConstants.INVALID_ERROR_MESSAGE, "hash algorithm"));
        } catch (Exception e) {
            log.error("HashingService :: generateHash {}", e);
            throw new EncryptionDecryptionException(EncryptionDecryptionConstants.GENERIC_ERROR_CODE, EncryptionDecryptionConstants.GENERIC_ERROR_MESSAGE);
        }
    }

}
public class HashingServiceTest {

    @Test
    void testGenerateHashSuccess() throws EncryptionDecryptionException {
        String input = "TestData";
        byte[] inputData = input.getBytes(StandardCharsets.UTF_8);
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        byte[] hashedData = HashingService.generateHash(inputData, algorithm);
        assertNotNull(hashedData);
        assertTrue(hashedData.length > 0);
    }



    @Test
    void testGenerateHashWithNullDataThrowsException() {
        HashAlgorithm algorithm = HashAlgorithm.SHA_256;
        assertThrows(NullPointerException.class, () -> HashingService.generateHash(null, algorithm));
    }

    @Test
    void testGenerateHashWithNullAlgorithmThrowsException() {
        byte[] inputData = "TestData".getBytes(StandardCharsets.UTF_8);

        assertThrows(NullPointerException.class, () -> HashingService.generateHash(inputData, null));
    }


}

