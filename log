   @Test
    void testCreateSuccessAuthentication() {
        String token = "jwtToken";

        when(claims.get(EPayJwtClaimsSet.USERNAME, String.class)).thenReturn("testUser");
        when(claims.get(EPayJwtClaimsSet.MID, String.class)).thenReturn("MID123");
        when(claims.get(EPayJwtClaimsSet.ORDER_NUMBER, String.class)).thenReturn("ORD123");
        when(claims.get(EPayJwtClaimsSet.ATRN_NUMBER, String.class)).thenReturn("ATRN123");
        when(claims.get(EPayJwtClaimsSet.TYPE, String.class)).thenReturn("Bearer");

        when(claims.get(EPayJwtClaimsSet.ROLE, ArrayList.class)).thenReturn(new ArrayList<>(List.of("ROLE_USER")));

        JwtAuthenticationToken result = (JwtAuthenticationToken) jwtAuthenticationProvider.authenticate(new JwtAuthenticationToken(token));

        assertNotNull(result);
        assertTrue(result.isAuthenticated());
        assertEquals(token, result.getCredentials());
        assertEquals("testUser", result.getPrincipal().getAuthenticationId());
        assertEquals("MID123", result.getPrincipal().getMId());
        assertEquals("ORD123", result.getPrincipal().getOrderRef());
        assertEquals("ATRN123", result.getPrincipal().getTransactionRef());
        assertEquals("Bearer", result.getPrincipal().getTokenType());
        assertEquals(List.of("ROLE_USER"), result.getPrincipal().getUserRole());
    }


    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        JwtAuthenticationToken jwtToken = (JwtAuthenticationToken) authentication;
        Claims claims =  jwtService.verifyJwtTokenAndGetClaims(jwtToken.getCredentials());
        return createSuccessAuthentication(jwtToken.getCredentials(), claims);
    }

 public Claims verifyJwtTokenAndGetClaims(String token) {
        Claims claims = getAllClaimsFromToken(token);
        if (issuer.equalsIgnoreCase(claims.getIssuer())) {
            if (isTokenExpired(claims.getExpiration())) {
                throw new IllegalStateException(EPayAuthenticationErrorConstants.TOKEN_EXPIRED);
            } else if (authenticationUserService.isTokenInValid(token, claims.get(TYPE, String.class))) {
                throw new IllegalStateException(EPayAuthenticationErrorConstants.INVALID_TOKEN);
            }
            String userName = (String) claims.get(USERNAME);
            String userNameWithTokenType = String.join(EPayAuthenticationConstant.JOINER, (String) claims.get(USERNAME), claims.get(TYPE, String.class));
            logger.info("Token request received for userNameWithTokenType: {}", userNameWithTokenType);
            EPayPrincipal ePayPrincipal = authenticationUserService.loadUserByUserName(userNameWithTokenType).orElseThrow(() -> new EPaySecurityException(EPayAuthenticationErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(EPayAuthenticationErrorConstants.NOT_FOUND_ERROR_MESSAGE, EPayAuthenticationErrorConstants.USER_NAME)));
            logger.info("Token request received for userNameWithTokenType: {}", userNameWithTokenType);
            if (!ePayPrincipal.getAuthenticationId().equalsIgnoreCase(userName)) {
                throw new IllegalStateException(EPayAuthenticationErrorConstants.INVALID_USER);
            }
        } else {
            throw new IllegalStateException(EPayAuthenticationErrorConstants.INVALID_ISSUER);
        }
        return claims;
    }

Cannot invoke "io.jsonwebtoken.Claims.get(Object)" because "claims" is null
java.lang.NullPointerException: Cannot invoke "io.jsonwebtoken.Claims.get(Object)" because "claims" is null
	at com.sbi.epay.authentication.service.JwtAuthenticationProvider.derivePrincipal(JwtAuthenticationProvider.java:39)
	at com.sbi.epay.authentication.service.JwtAuthenticationProvider.createSuccessAuthentication(JwtAuthenticationProvider.java:30)
	at com.sbi.epay.authentication.service.JwtAuthenticationProvider.authenticate(JwtAuthenticationProvider.java:26)
	at com.sbi.epay.authentication.service.JwtAuthenticationProviderTest.testCreateSuccessAuthentication(JwtAuthenticationProviderTest.java:76)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
