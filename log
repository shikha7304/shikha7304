import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
 
import java.text.MessageFormat;
import java.util.List;
import java.util.UUID;
 
@RestControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
 
    @ExceptionHandler(InvalidFormatException.class)
    public ResponseEntity<Object> handleInvalidUUIDException(InvalidFormatException ex) {
        ErrorDto errorDto;
 
        if (ex.getTargetType() == UUID.class) {  
            String formattedMessage = MessageFormat.format(
                ErrorConstants.INVALID_ERROR_MESSAGE, "Request ID", "Invalid UUID format"
            );
 
            errorDto = ErrorDto.builder()
                    .errorCode(ErrorConstants.INVALID_ERROR_CODE)
                    .errorMessage(formattedMessage)
                    .build();
        } else {
            errorDto = ErrorDto.builder()
                    .errorCode(ErrorConstants.INVALID_ERROR_CODE)
                    .errorMessage("Invalid request format.")
                    .build();
        }
 
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(MerchantResponse.builder()
                        .status(MerchantConstant.RESPONSE_FAILURE)
                        .errors(List.of(errorDto))
                        .build());
    }
 
    // ✅ New method to handle invalid UUID binding
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex,
            org.springframework.http.HttpHeaders headers,
            HttpStatus status,
            org.springframework.web.context.request.WebRequest request) {
 
        ErrorDto errorDto = ErrorDto.builder()
                .errorCode("INVALID_REQUEST")
                .errorMessage("Invalid request parameters.")
                .build();
 
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(MerchantResponse.builder()
                        .status(MerchantConstant.RESPONSE_FAILURE)
                        .errors(List.of(errorDto))
                        .build());
    }
}






@Override
protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
                                                                HttpHeaders headers, HttpStatus status,
                                                                WebRequest request) {
    Throwable cause = ex.getCause();
    // Check if the root cause is an InvalidFormatException for a UUID
    if (cause instanceof InvalidFormatException invalidFormatException &&
        invalidFormatException.getTargetType() == UUID.class) {

        String formattedMessage = MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE,
                                                       "Request ID", "Invalid UUID format");
        ErrorDto errorDto = ErrorDto.builder()
                                    .errorCode(ErrorConstants.INVALID_ERROR_CODE)
                                    .errorMessage(formattedMessage)
                                    .build();

        MerchantResponse response = MerchantResponse.builder()
                                                    .status(MerchantConstant.RESPONSE_FAILURE)
                                                    .errors(List.of(errorDto))
                                                    .build();
        // Return 200 OK as per your requirement
        return ResponseEntity.ok(response);
    }

    // Default handling for other JSON parse errors
    ErrorDto errorDto = ErrorDto.builder()
                                .errorCode(ErrorConstants.GENERIC_ERROR_CODE)
                                .errorMessage("Invalid request format. Please check the request body.")
                                .build();

    MerchantResponse response = MerchantResponse.builder()
                                                .status(MerchantConstant.RESPONSE_FAILURE)
                                                .errors(List.of(errorDto))
                                                .build();
    return ResponseEntity.badRequest().body(response);
}







@ExceptionHandler(HttpMessageNotReadableException.class)
public ResponseEntity<Object> handleHttpMessageNotReadableException(HttpMessageNotReadableException ex) {
    Throwable cause = ex.getCause();
    
    if (cause instanceof InvalidFormatException invalidFormatException && 
        invalidFormatException.getTargetType() == UUID.class) {
        
        String formattedMessage = MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Request ID", "Invalid UUID format");
        
        ErrorDto errorDto = ErrorDto.builder()
                .errorCode(ErrorConstants.INVALID_ERROR_CODE)
                .errorMessage(formattedMessage)
                .build();

        return ResponseEntity.ok().body(MerchantResponse.builder()
                .status(MerchantConstant.RESPONSE_FAILURE)
                .errors(List.of(errorDto))
                .build());
    }

    // Default error response if it's not related to UUID format
    ErrorDto errorDto = ErrorDto.builder()
            .errorCode(ErrorConstants.GENERIC_ERROR_CODE)
            .errorMessage("Invalid request format.")
            .build();

    return ResponseEntity.badRequest().body(MerchantResponse.builder()
            .status(MerchantConstant.RESPONSE_FAILURE)
            .errors(List.of(errorDto))
            .build());
}








@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class ErrorConstants {

    public static final String MANDATORY_ERROR_CODE = "7001";
    public static final String MANDATORY_ERROR_MESSAGE = "{0} is mandatory.";

    public static final String NOT_FOUND_ERROR_CODE = "7003";
    public static final String NOT_FOUND_ERROR_MESSAGE = "{0} is not found.";
    public static final String LOGIN_USER_NOT_FOUND_ERROR_MESSAGE = "Invalid User -> Please check UserName and Password";

    public static final String INVALID_ERROR_CODE = "7002";
    public static final String INVALID_ERROR_MESSAGE = "Invalid {0}. Reason : {1}";


@ExceptionHandler(InvalidFormatException.class)
public ResponseEntity<Object> handleInvalidUUIDException(InvalidFormatException ex) {
    ErrorDto errorDto;
    if (ex.getTargetType() == UUID.class) {
        String formattedMessage = MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Request ID", "Invalid UUID format");
        errorDto = ErrorDto.builder()
                .errorCode(ErrorConstants.INVALID_ERROR_CODE)
                .errorMessage(formattedMessage)
                .build();
    } else {
        errorDto = ErrorDto.builder()
                .errorCode(ErrorConstants.GENERIC_ERROR_CODE)
                .errorMessage("Invalid request format.")
                .build();
    }
    return ResponseEntity.ok().body(MerchantResponse.builder()
            .status(MerchantConstant.RESPONSE_FAILURE)
            .errors(List.of(errorDto))
            .build());
}

