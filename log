    @Test
    void testGetParentAssignedMIds() {
        when(merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(any(UUID.class))).thenReturn(List.of(merchantInfoDto));
        when(merchantMapper.mapMerchantInfoDTOListToResponseList(any())).thenReturn(List.of(new MerchantInfoResponse()));

        List<MerchantInfoResponse> response = merchantUserService.getParentAssignedMIds(merchantUserDto, List.of(merchantInfoDto));
        assertNotNull(response);

    }

    @Test
    void testGetParentAssignedMenus() {
        when(merchantUserDao.getUserMenuPermission(any(UUID.class))).thenReturn(List.of(menuResponse));
        List<UserMenuPermissionEntityResponse> response = merchantUserService.getParentAssignedMenus(merchantUserDto, List.of(menuResponse));
        assertNotNull(response);
    }





protected List<MerchantInfoResponse> getParentAssignedMIds(MerchantUserDto merchantUser, List<MerchantInfoDto> assignedMIds) {
        log.info("Fetching unassigned MIDs for user ID: {}", merchantUser.getId());
        List<MerchantInfoResponse> unAssignedMerchantInfo = new ArrayList<>();

        if (ObjectUtils.isNotEmpty(merchantUser.getParentUserId())) {
            //Step 2: Get Parent Assigned MIDs List
            List<MerchantInfoDto> parentAssignedMIds = merchantInfoDao.getAllAccessMerchantInfoForMerchantUser(merchantUser.getParentUserId());

            //Step 3: Remove Assigned MIDs List from Parent Assigned MIDs List
            parentAssignedMIds.removeAll(assignedMIds);
            if (CollectionUtils.isNotEmpty(parentAssignedMIds)) {
                unAssignedMerchantInfo.addAll(merchantMapper.mapMerchantInfoDTOListToResponseList(parentAssignedMIds));
            }
        }
        log.info("Successfully fetched unassigned MIDs for user ID: {}", merchantUser.getId());
        return unAssignedMerchantInfo;
    }

    /**
     * Retrieves the unassigned menus for a specified user by comparing the parent's
     * accessible menus with the user's currently assigned menus.
     *
     * @param merchantUser Merchant user details.
     * @param assignedMenus List of currently assigned menus for the user.
     * @return List of unassigned menus available for the user.
     */
    protected List<UserMenuPermissionEntityResponse> getParentAssignedMenus(MerchantUserDto merchantUser, List<UserMenuPermissionEntityResponse> assignedMenus) {
        log.info("Fetching unassigned menus for user ID: {}", merchantUser.getId());
        List<UserMenuPermissionEntityResponse> unAssignedMerchantInfo = new ArrayList<>();

        if (ObjectUtils.isNotEmpty(merchantUser.getParentUserId())) {
            //Step 2: Get Parent Assigned MIDs List
            List<UserMenuPermissionEntityResponse> parentAssignedMenus = merchantUserDao.getUserMenuPermission(merchantUser.getParentUserId());

            //Step 3: Remove Assigned MIDs List from Parent Assigned MIDs List
            parentAssignedMenus.removeAll(assignedMenus);
            for (UserMenuPermissionEntityResponse p : parentAssignedMenus) {
                boolean isFound = false;
                for (UserMenuPermissionEntityResponse a : assignedMenus) {
                    if (a.getMenuCode().equalsIgnoreCase(p.getMenuCode())) {
                        isFound = true;
                        break;
                    }
                }
                if(!isFound) {
                    unAssignedMerchantInfo.add(p);
                }
            }
        }
        log.info("Successfully fetched unassigned menus for user ID: {}", merchantUser.getId());
        return unAssignedMerchantInfo;
    }
