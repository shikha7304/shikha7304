@Test
void testValidAuthRequest_InvalidTokenType() {
    // Create a custom subclass with an invalid token type
    TokenRequest invalidTokenRequest = new TokenRequest() {
        @Override
        public TokenType getTokenType() {
            return null; // Simulating an unexpected/null token type
        }
    };

    // Expect an EPaySecurityException due to invalid token type
    EPaySecurityException exception = assertThrows(EPaySecurityException.class, () -> {
        AuthRequestValidator.validAuthRequest(invalidTokenRequest);
    });

    // Verify that the error messages list is not empty
    assertNotNull(exception.getErrorMessages());
    assertFalse(exception.getErrorMessages().isEmpty());

    // Verify the error code
    assertEquals(EPayAuthenticationErrorConstants.INVALID_ERROR_CODE, 
                 exception.getErrorMessages().getFirst().getErrorCode());

    // Verify the error message
    assertEquals(MessageFormat.format(EPayAuthenticationErrorConstants.INVALID_ERROR_MESSAGE, "TOKEN_TYPE"),
                 exception.getErrorMessages().getFirst().getErrorMessage());
}




@Test
void testValidAuthRequest_InvalidTokenType() {
    // Spy on a real TokenRequest object
    TokenRequest invalidTokenRequest = spy(new TokenRequest() {});

    // Use a token type that is outside expected cases (assuming there's no UNKNOWN in production)
    doReturn(TokenType.UNKNOWN).when(invalidTokenRequest).getTokenType();

    // Expect an EPaySecurityException due to invalid token type
    EPaySecurityException exception = assertThrows(EPaySecurityException.class, () -> {
        AuthRequestValidator.validAuthRequest(invalidTokenRequest);
    });

    // Verify that the error messages list is not empty
    assertNotNull(exception.getErrorMessages());
    assertFalse(exception.getErrorMessages().isEmpty());

    // Verify the error code
    assertEquals(EPayAuthenticationErrorConstants.INVALID_ERROR_CODE, 
                 exception.getErrorMessages().getFirst().getErrorCode());

    // Verify the error message
    assertEquals(MessageFormat.format(EPayAuthenticationErrorConstants.INVALID_ERROR_MESSAGE, "TOKEN_TYPE"),
                 exception.getErrorMessages().getFirst().getErrorMessage());
}




@Test
void testValidAuthRequest_InvalidTokenType() {
    // Use a spy instead of a mock to allow method stubbing while preserving real behavior
    TokenRequest invalidTokenRequest = spy(new TokenRequest() {});

    // Ensure getTokenType() returns null to simulate an invalid token type scenario
    doReturn(null).when(invalidTokenRequest).getTokenType();

    // Expect an EPaySecurityException due to invalid token type
    EPaySecurityException exception = assertThrows(EPaySecurityException.class, () -> {
        AuthRequestValidator.validAuthRequest(invalidTokenRequest);
    });

    // Verify that the error messages list is not empty
    assertNotNull(exception.getErrorMessages());
    assertFalse(exception.getErrorMessages().isEmpty());

    // Verify the error code
    assertEquals(EPayAuthenticationErrorConstants.INVALID_ERROR_CODE, 
                 exception.getErrorMessages().getFirst().getErrorCode());

    // Verify the error message
    assertEquals(MessageFormat.format(EPayAuthenticationErrorConstants.INVALID_ERROR_MESSAGE, "TOKEN_TYPE"),
                 exception.getErrorMessages().getFirst().getErrorMessage());
}





@Test
void testValidAuthRequest_InvalidTokenType() {
    // Create a real TokenRequest object with null tokenType
    TokenRequest invalidTokenRequest = new TokenRequest() {};
    invalidTokenRequest.setTokenType(null); // Simulating a null token type

    // Expect an EPaySecurityException due to invalid token type
    EPaySecurityException exception = assertThrows(EPaySecurityException.class, () -> {
        AuthRequestValidator.validAuthRequest(invalidTokenRequest);
    });

    // Verify that the error messages list is not empty
    assertNotNull(exception.getErrorMessages());
    assertFalse(exception.getErrorMessages().isEmpty());

    // Verify the error code
    assertEquals(EPayAuthenticationErrorConstants.INVALID_ERROR_CODE, 
                 exception.getErrorMessages().getFirst().getErrorCode());

    // Verify the error message
    assertEquals(MessageFormat.format(EPayAuthenticationErrorConstants.INVALID_ERROR_MESSAGE, "TOKEN_TYPE"),
                 exception.getErrorMessages().getFirst().getErrorMessage());
}





@Test
    void testValidAuthRequest_InvalidTokenType() {
        // Create a mock TokenRequest with an invalid token type
        TokenRequest invalidTokenRequest = mock(TokenRequest.class);
        when(invalidTokenRequest.getTokenType()).thenReturn(null); // Simulating an unexpected/null token type

        // Expect an EPaySecurityException due to invalid token type
        EPaySecurityException exception = assertThrows(EPaySecurityException.class, () -> {
            AuthRequestValidator.validAuthRequest(invalidTokenRequest);
        });

        // Verify the error message and code
        assertFalse(exception.getErrorMessage().isEmpty());
        assertEquals(EPayAuthenticationErrorConstants.INVALID_ERROR_CODE, exception.getErrorMessages().getFirst().getErrorCode());
        assertEquals(
                MessageFormat.format(EPayAuthenticationErrorConstants.INVALID_ERROR_MESSAGE, "TOKEN_TYPE"),
                exception.getErrorMessage());

    }

Cannot invoke "com. sbi. epay. authentication. util. enums. TokenType. ordinal()" because the return value of "com. sbi. epay. authentication. model. TokenRequest. getTokenType()" is nul
