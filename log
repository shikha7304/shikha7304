Yes! If you want to fix the Privacy Violation issue with minimal code changes, here’s a simpler approach:

1. Fix in DecryptionService.java (Minimal Change)

Modify the logging statement to remove sensitive data (like key and value):

log.info("Decryption Service :: algorithm: {}, gcmIvLength: {}, gcmTagLength: {}", 
        algorithm, gcmIvLength, gcmTagLength);

✅ Only logs non-sensitive information
❌ No major refactoring required

2. Fix in LoggerUtility.java (Minimal Change)

Instead of modifying all logging calls, just prevent sensitive data from being logged at the entry point.

Option 1: Mask sensitive data directly before logging

Modify the info() method:

public void info(String format, Object... arguments) {
    setMDC(); // Maintain MDC context
    
    // Mask sensitive arguments
    for (int i = 0; i < arguments.length; i++) {
        if (arguments[i] instanceof String && containsSensitiveData((String) arguments[i])) {
            arguments[i] = "****";  // Mask data
        }
    }

    logger.info(format, arguments);
}

private boolean containsSensitiveData(String data) {
    return data.toLowerCase().contains("key") || data.toLowerCase().contains("password");
}

✅ Minimal changes
✅ Only masks sensitive data dynamically before logging

3. Alternative Quick Fix (Disable Sensitive Logging via Logging Framework)

If your project uses logback, you can filter out sensitive logs without changing code:

logback.xml (Quick Config Fix)

Add a filter to ignore logs containing sensitive keywords:

<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.EvaluatorFilter">
            <evaluator>
                <expression>!(message.contains("key") || message.contains("password"))</expression>
            </evaluator>
            <onMatch>DENY</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    <root level="info">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>

✅ No Java code changes
✅ Filters logs dynamically
✅ Easy to revert if needed

Final Recommendation
	•	If you can modify the log statements, remove sensitive fields (Best option).
	•	If you want minimal code change, mask sensitive values dynamically in LoggerUtility.java.
	•	If you want zero code changes, use a logging framework filter.

Would you prefer the quick fix in code or via logback.xml?


Invoices 

Transaction Fee invoices  

Users will be able to see and download generated transaction fee invoices as per the existing system. 

GST invoices  

Users will be able to select desired financial year, one or multiple months from the selected year, and click on download to download the GST invoices. 

 

Reports 

Reports Download 

Created utility to generate and download order transactions and refund reports, Users can search any transaction by merchant order number, SBIePay order ID, ATRN, bank reference number, Duration and Transaction/Order Status. 

Standard Reports and formats- 

ORDER Reports 

TRANSACTION Reports 

REFUNDS Reports 

 

Schedule Reports 

Users can create a schedule and automate the report generation process, instead of downloading the report manually every time. 

Recent Transactions 

On the Dashboard, only limited entries will be displayed, Recent transactions will provide a list of daily and monthly transactions amount, refund amount and pending amount for settlement. 

Transactions Summary Report 

Fetches the transaction summary report for a given merchant ID and date range, including failure/Success percentages. 

 

Paymode wise Transaction report  

Retrieves a transaction pay mode report for a merchant within a specified date range. 

 

Transaction Trends 

Fetches transaction trends (daily, weekly, or monthly) for a given merchant ID and frequency




https://neosofttechnologiesmail-my.sharepoint.com/:w:/r/personal/binoy_medhi_neosofttech_com/_layouts/15/Doc.aspx?sourcedoc=%7B9B3E24B6-F14E-4441-A33B-C030D4CDFBD3%7D&file=Release%20Note_date%20format%20change%20Odisha%2CGrips%2CMSEDCL1.docx&action=default&mobileredirect=true
