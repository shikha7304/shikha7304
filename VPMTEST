package com.epay.merchant.controller;

import com.epay.merchant.model.request.MerchantUserRequest;
import com.epay.merchant.model.response.*;
import com.epay.merchant.service.MerchantUserService;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import io.swagger.v3.oas.annotations.Operation;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;


/**
 * Class Name: MerchantUserController
 * *
 * Description:
 * *
 * Author: Subhra Goswami
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/user")
public class MerchantUserController {

    private final MerchantUserService merchantUserService;
    LoggerUtility log = LoggerFactoryUtility.getLogger(ValidationController.class);

    /**
     * Get All Access Merchant Info
     *
     * @param pageable Pageable
     * @return MerchantInfoResponse
     */
    @GetMapping("/access/mids/info")
    @Operation(summary = "Get access merchant info details of logged in merchantUser.", description = "Get access merchant info details of logged in merchantUser.")
    public MerchantResponse<MerchantInfoResponse> getAllAccessMerchantInfo(@PageableDefault(size = 50, page = 0) Pageable pageable) {
        log.info("Received request to fetch merchant info");
        return merchantUserService.getAllAccessMerchantInfo(pageable);
    }

    /**
     * Get Merchant User Access
     *
     * @return Merchant User Access Response
     */
    @GetMapping("/access")
    @Operation(summary = "Get Merchant User Profile and Menu with permissions.", description = "Get Logged in user profile and access permission ")
    public MerchantResponse<MerchantUserAccessResponse> getMerchantUserAccess() {
        return merchantUserService.getMerchantUserAccess();
    }

    /**
     * Get Merchant User Profile
     *
     * @return UserProfileResponse
     */
    @GetMapping("/profile")
    @Operation(summary = "Get Merchant User Profile details.", description = "Get Logged in user profile and view details ")
    public MerchantResponse<UserProfileResponse> getMerchantUserProfile() {
        log.info("GetMerchantUserProfile");
        return merchantUserService.getMerchantUserProfile();
    }

    /**
     * Create Merchant User
     *
     * @param merchantUserRequest MerchantUserRequest
     * @return MerchantUserResponse
     */
    @PostMapping
    @Operation(summary = "User Creation for Merchant by Merchant Admin or Super Admin", description = "Merchant SuperAdmin/Admin will use this API to create Merchant Users for managing merchant portal")
    @PreAuthorize("hasAnyRole('ADMIN','SUPER_ADMIN')")
    public MerchantResponse<MerchantUserResponse> createMerchantUser(@RequestBody MerchantUserRequest merchantUserRequest) {
        log.info("Entity Creation : merchantRequest {}", merchantUserRequest);
        return merchantUserService.createMerchantUser(merchantUserRequest);
    }

}
