public MerchantResponse<HelpSupportResponse> saveHelpSupport(String mId, HelpSupportRequest helpSupportRequest) {
        return helpSupportService.saveHelpSupport(mId, helpSupportRequest);
    }


 public MerchantResponse<HelpSupportResponse> saveHelpSupport(String mId, HelpSupportRequest helpSupportRequest) {
        //Step 1 : HelpSupportValidator validation
        helpSupportValidator.validateHelpSupportRequest(mId, helpSupportRequest);
        //Step 2 : Save the Merchant and Merchant User Data in DB
        List<HelpSupportDto> helpSupport = helpSupportDao.saveHelpSupport(mId, helpSupportRequest);
        HelpSupportResponse helpSupportResponse = HelpSupportResponse.builder().helpSupports(helpSupport).build();
        //Step 3 : Build MerchantResponse and return to caller
        return MerchantResponse.<HelpSupportResponse>builder().data(List.of(helpSupportResponse)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).build();
    }

 @Transactional
    public List<HelpSupportDto> saveHelpSupport(String mId, HelpSupportRequest helpSupportRequest) {
        List<HelpSupport> helpSupports = new ArrayList<>();
        for (HelpSupportDto helpSupportDto : helpSupportRequest.getHelpSupports()) {
            HelpSupport helpSupport = helpSupportRepository.findByMidAndType(mId, helpSupportDto.getType()).orElse(HelpSupport.builder().mId(mId).type(helpSupportDto.getType()).build());
            helpSupport.setValue(helpSupportDto.getValue());
            helpSupport.setStatus(helpSupportDto.isStatus() ? STATUS_ACTIVE : STATUS_IN_ACTIVE);
            helpSupports.add(helpSupport);
        }
        helpSupports = helpSupportRepository.saveAll(helpSupports);
        return helpSupportMapper.mapEntityListToDtoList(helpSupports);
    }
