 public static final String DATE_TIME = "dd MMM yyyy hh:mm:ss a";

20 Jan 1970 12:35:31 am,


import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

@Service
@RequiredArgsConstructor
public class FileGeneratorService {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private static int DEFAULT_BUFFER_SIZE = 8192;
    private final FileGenerator fileGenerator;
    private final MerchantUserRoleRepository merchantUserRoleRepository;

    // DateTimeFormatter for formatting the timestamp
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd MMM yyyy hh:mm:ss a");

    /**
     * Setting file name, content type, and content in HTTP servlet response.
     *
     * @param response                 HttpServletResponse
     * @param contentType              String
     * @param fileName                 String
     * @param merchantUserResponseList List of MerchantUserDto
     */
    protected void setFileResponse(HttpServletResponse response, String contentType, String fileName, List<MerchantUserDto> merchantUserResponseList) {
        // Set the response headers for a downloadable file
        response.setContentType(contentType);
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=\"" + fileName + "\"");

        // Write the file content to the response output stream
        try {
            var writer = response.getWriter();
            writer.write("User ID,Name,Email,Mobile No,User Type,Creation Date,Status\n");

            for (MerchantUserDto user : merchantUserResponseList) {
                String roleName = merchantUserRoleRepository.findById(user.getRole())
                        .map(MerchantUserRole::getRole)
                        .orElse("Unknown Role");

                // Format the createdAt field
                String formattedDate = formatCreatedAt(user.getCreatedAt());

                String csvRow = user.getId() + ","
                        + user.getUserName() + ","
                        + user.getFirstName() + " " + user.getLastName() + ","
                        + user.getEmailMasked() + ","
                        + user.getMobilePhoneMasked() + ","
                        + roleName + ","
                        + formattedDate + ","
                        + user.getStatus() + "\n";
                writer.write(csvRow);
            }

            writer.flush();
        } catch (IOException e) {
            log.error("Error in setting file content in response", e);
            throw new MerchantException(ErrorConstants.GENERIC_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, fileName));
        }
    }

    /**
     * Converts a timestamp (in milliseconds) to a formatted date string.
     *
     * @param timestamp long
     * @return Formatted date string (e.g., 27 Aug 2025 11:00:45 PM)
     */
    private String formatCreatedAt(Long timestamp) {
        if (timestamp == null) {
            return "N/A"; // Handle null timestamp
        }
        LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(timestamp), ZoneId.systemDefault());
        return dateTime.format(DATE_FORMATTER);
    }
}







package com.epay.merchant.service;


import com.epay.merchant.dao.MerchantUserDao;
import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.entity.MerchantUserRole;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.repository.MerchantUserRoleRepository;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.enums.Report;
import com.epay.merchant.util.enums.ReportFormat;
import com.epay.merchant.util.file.generator.FileGenerator;
import com.epay.merchant.util.file.model.FileModel;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class FileGeneratorService {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private static int DEFAULT_BUFFER_SIZE = 8192;
    private final   FileGenerator fileGenerator;
    private final MerchantUserRoleRepository merchantUserRoleRepository ;

    /**
     * Building content type and setting file in response.
     * @param httpResponse HttpServletResponse
     * @param reportFormat ReportFormat
     * @param merchantUserDtos List<MerchantUserDto>
     */
    public  void downloadFile(HttpServletResponse httpResponse, ReportFormat reportFormat,List<MerchantUserDto>merchantUserDtos) {
        String contentType = "text/csv";
        String filename="merchant_users.csv";
        setFileResponse(httpResponse, contentType,filename,merchantUserDtos);
    }

    public  FileModel buildFileModel(ReportFormat reportFormat, List<String> header, List<List<Object>> fileData, Map<String, Object> pdfFileData) {
        return fileGenerator.buildFileModel(reportFormat, header, fileData, pdfFileData);
    }

    public File fileGenerator(ReportFormat reportFormat, Report report, String userName, FileModel fileModel) {
        return fileGenerator.fileGenerator(reportFormat, report, userName, fileModel);
    }
    /**
     * TODO: Temp code: it will replace from S3 code.
     * @param filePath String
     * @return InputStream
     */
    private InputStream getFileContent(String filePath) {
        try {
            return new FileInputStream(filePath);
        } catch (IOException e) {
            log.error("Unable to read file {}", filePath, e);
            throw new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, filePath));
        }
    }

    /**
     * Setting file name, content type and content in http servlet response.
     * @param response HttpServletResponse
     * @param contentType String
     * @param fileName String
     */
    protected void setFileResponse(HttpServletResponse response, String contentType, String fileName,  List<MerchantUserDto> merchantUserResponseList) {
        // Set the response headers for a downloadable file
        response.setContentType(contentType);
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION,"attachment;filename=\"" + fileName + "\"");
        // Write the file content to the response output stream
        try {
           //use the writer to write  the csv content
            var writer = response.getWriter();
            writer.write("User ID,Name,Email,Mobile No,User Type,Creation Date,Status\n");

            for (MerchantUserDto user : merchantUserResponseList) {
                String roleName=merchantUserRoleRepository.findById(user.getRole()).map(MerchantUserRole::getRole).orElse("Unknown Role");

                String csvRow = user.getId() + ","
                        + user.getUserName() + ","
                        + user.getFirstName() + " " + user.getLastName()+ ","
                        + user.getEmailMasked() + ","
                        + user.getMobilePhoneMasked() + ","
                        + roleName + ","
                        + user.getCreatedAt() + ","
                        + user.getStatus() + "\n";
                response.getWriter().write(csvRow);
            }
                writer.flush();
        }
        catch (IOException e) {
            log.error("Error in setting file content in response", e);
            throw new MerchantException(ErrorConstants.GENERIC_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, fileName));
        }
    }
}


this is + user.getCreatedAt() + "," is in long format but i want date in 27 aug 2025 11:00:45 PM
