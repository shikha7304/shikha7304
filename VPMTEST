package com.epay.merchant.dao;

import com.epay.merchant.dto.MerchantUserRoleDto;
import com.epay.merchant.entity.MerchantUserRole;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.mapper.MerchantUserRoleMapper;
import com.epay.merchant.repository.MerchantUserRoleRepository;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.enums.MerchantUserRoles;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.text.MessageFormat;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

@Component
@RequiredArgsConstructor
public class MerchantUserRoleDao {

    private final MerchantUserRoleRepository merchantUserRoleRepository;
    private final MerchantUserRoleMapper mapper;

    /**
     * It will fetch ADMIN merchant user role
     * @return MerchantUserRoles
     */
    public MerchantUserRole getAdminRoleId() {
        return merchantUserRoleRepository.findByRole(MerchantUserRoles.ADMIN.name()).orElseThrow(() -> new MerchantException(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Admin Role", "Unable to fetch ADMIN MerchantUserRole.")));
    }

    /**
     * It will extract all the user role list
     * @return MerchantUserRoles
     */
    public List<MerchantUserRoleDto> getMerchantUserRoles() {
        List<MerchantUserRole> merchantUserRoles = merchantUserRoleRepository.findAll();
        return mapper.mapMerchantUserRoleListEntityToListDto(merchantUserRoles);
    }

    /**
     * It will extract the user role name based on the role ID
     * @return MerchantUserRoles
     */
    public MerchantUserRole getRoleNameById(UUID roleId) {
        return merchantUserRoleRepository.findById(roleId).orElseThrow(() -> new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "User Role")));
    }

    /**
     * It will map the role based on the ID
     * @return MerchantUserRoles
     */
    public Map<UUID, MerchantUserRoleDto> getUserRoleDtoMap() {
        return getMerchantUserRoles().stream().collect(Collectors.toMap(MerchantUserRoleDto::getId, role -> role));
    }

    /**
     * It will fetch the super admin role ID from user_roles table
     * @return UUID
     */
    public UUID getSuperAdminRoleId() {
        Map<UUID, MerchantUserRoleDto> roleMap = getUserRoleDtoMap();
        return roleMap.keySet().stream().filter(id ->
                MerchantUserRoles.SUPER_ADMIN.name().equalsIgnoreCase(roleMap.get(id).getRole())).findFirst()
                .orElseThrow(() -> new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE,
                        MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "Super Admin Role")));
    }
}
