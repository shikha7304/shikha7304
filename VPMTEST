@Test
void testDownloadMerchantUserReport() {
    // Mock principal
    when(mockPrincipal.getUsername()).thenReturn("testUser");
    SecurityContextHolder.getContext().setAuthentication(mock(Authentication.class));
    when(SecurityContextHolder.getContext().getAuthentication().getPrincipal()).thenReturn(mockPrincipal);

    // Mock merchant user
    MerchantUserDto mockMerchantUser = MerchantUserDto.builder()
            .id(UUID.randomUUID())
            .userName("testUser")
            .status(UserStatus.ACTIVE)
            .build();
    when(merchantUserDao.getByUserName("testUser", UserStatus.ACTIVE)).thenReturn(mockMerchantUser);

    // Mock merchant user list
    List<MerchantUserDto> mockMerchantUserList = List.of(
            MerchantUserDto.builder()
                    .id(UUID.randomUUID())
                    .userName("Test")
                    .firstName("John")
                    .lastName("Doe")
                    .email("john.doe@example.com")
                    .mobilePhone("1234567890")
                    .status(UserStatus.ACTIVE)
                    .role(UUID.randomUUID()) // Add role ID
                    .build()
    );
    MerchantUserRequestList merchantUserRequestList = new MerchantUserRequestList();
    merchantUserRequestList.setUserName("Test");
    merchantUserRequestList.setStatus("ACTIVE");
    when(merchantUserDao.getMerchantUsers(merchantUserRequestList)).thenReturn(mockMerchantUserList);

    // Mock role map
    UUID roleId = mockMerchantUserList.get(0).getRole(); // Fetch role ID from the mocked user
    MerchantUserRoleDto merchantUserRoleDto = new MerchantUserRoleDto();
    merchantUserRoleDto.setId(roleId);
    merchantUserRoleDto.setRole("USER");
    Map<UUID, MerchantUserRoleDto> roleMap = Map.of(roleId, merchantUserRoleDto);
    when(merchantUserRoleDao.getUserRoleDtoMap()).thenReturn(roleMap);

    // Mock CSV generator
    doNothing().when(csvGenerator).downloadCsvFile(eq(response), eq("merchant_users"), eq(USER_DOWNLOAD_HEADER), any());

    // Call the method
    merchantUserService.downloadMerchantUserReport(response, merchantUserRequestList);

    // Verify interactions
    verify(merchantUserDao).getByUserName("testUser", UserStatus.ACTIVE);
    verify(merchantUserDao).getMerchantUsers(merchantUserRequestList);
    verify(csvGenerator).downloadCsvFile(eq(response), eq("merchant_users"), eq(USER_DOWNLOAD_HEADER), any());
}






@Test
    void testDownloadMerchantUserReport()
    {
        when(mockPrincipal.getUsername()).thenReturn("testUser");
        SecurityContextHolder.getContext().setAuthentication(mock(Authentication.class));
        when(SecurityContextHolder.getContext().getAuthentication().getPrincipal()).thenReturn(mockPrincipal);
        MerchantUserDto mockMerchantUser = MerchantUserDto.builder().id(UUID.randomUUID()).userName("testUser").status(UserStatus.ACTIVE).build();
        when(merchantUserDao.getByUserName("testUser", UserStatus.ACTIVE)).thenReturn(mockMerchantUser);
        List<MerchantUserDto> mockMerchantUserList = List.of(MerchantUserDto.builder().id(UUID.randomUUID()).userName("Test").firstName("John").lastName("Doe").email("john.doe@example.com").mobilePhone("1234567890").status(UserStatus.ACTIVE).build());
        MerchantUserRequestList merchantUserRequestList = new MerchantUserRequestList();
        merchantUserRequestList.setUserName("Test");
        merchantUserRequestList.setStatus("ACTIVE");
        List<MerchantUserDto> merchantUserDto = new ArrayList<>();
        merchantUserDto.add(MerchantUserDto.builder().userName("user9").status(UserStatus.ACTIVE).build());
        //List<List<Object>> objectList = Arrays.asList(merchantUserDto);
        when(merchantUserDao.getMerchantUsers(merchantUserRequestList)).thenReturn(mockMerchantUserList);
        doNothing().when(csvGenerator).downloadCsvFile(response, "Merchant_user.csv",List.of("User ID", "Name", "Email", "Mobile No.", "User Type", "Creation Date", "Status"),List.of(Collections.singletonList(merchantUserDto)));
        MerchantUserRoleDto merchantUserRoleDto = new MerchantUserRoleDto();
        merchantUserRoleDto.setId(UUID.randomUUID());
        merchantUserRoleDto.setRole("USER");
        when(merchantUserRoleDao.getUserRoleDtoMap()).thenReturn(any(),any());
        merchantUserService.downloadMerchantUserReport(response,merchantUserRequestList);
        verify(merchantUserDao).getByUserName("testUser", UserStatus.ACTIVE);
        verify(merchantUserDao).getMerchantUsers(any());
        //verify(csvGenerator).downloadFile(response, ReportFormat.CSV, mockMerchantUserList);
    }

 public void downloadMerchantUserReport(HttpServletResponse response, MerchantUserRequestList merchantUserRequestList) {
        log.info("Fetching list of merchant users {} ", merchantUserRequestList);
        final Map<UUID, MerchantUserRoleDto> roleMap = merchantUserRoleDao.getUserRoleDtoMap();
        List<MerchantUserDto> merchantUserResponseList = merchantUserDao.getMerchantUsers(merchantUserRequestList);
        log.info("Returning list of merchant users {}", merchantUserResponseList);
        List<List<Object>> fileData = merchantUserResponseList.stream().map(user -> convertToListOfObject(roleMap.get(user.getRole()).getRole(), user)).toList();
        csvGenerator.downloadCsvFile(response, "merchant_users", USER_DOWNLOAD_HEADER, fileData);
        log.info("Generated CSV file containing list of merchant user");
    }

 public Map<UUID, MerchantUserRoleDto> getUserRoleDtoMap() {
        return getMerchantUserRoles().stream().collect(Collectors.toMap(MerchantUserRoleDto::getId, role -> role));
    }
 public List<MerchantUserRoleDto> getMerchantUserRoles() {
        List<MerchantUserRole> merchantUserRoles = merchantUserRoleRepository.findAll();
        return mapper.mapMerchantUserRoleListEntityToListDto(merchantUserRoles);
    }
