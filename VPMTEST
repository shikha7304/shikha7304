public class AlertDao 
/**
     * GenerateAlertForReport - sending alert for generated Report
     * @param reportAlertDto ReportAlertDto
     */
    public void generateAlertForReport(ReportAlertDto reportAlertDto) {
        AlertMaster alertMasterData = alertMasterRepository.findByName(MerchantConstant.REPORT_GENERATION).orElseThrow(()-> new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "Report Name")));
        AlertManagement alertManagement = AlertManagement.builder().alertId(alertMasterData.getId()).alertDescription(MessageFormat.format(alertMasterData.getDescription(), reportAlertDto.getReportName())).alertIdentifier(MerchantUtil.generateUnique12DigitNumber()).isViewed(false).mId(reportAlertDto.getMId()).build();
        log.info("generated Alert for ReportName: {}, mid : {}",reportAlertDto.getReportName(),reportAlertDto.getMId());
        alertManagementRepository.save(alertManagement);
    }
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ReportAlertDto {
    private String mId;
    private String reportName;
}

@Component
@RequiredArgsConstructor
public class ReportAlertListener {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final ObjectMapper objectMapper;
    private final AlertService alertService;

    @KafkaListener(topics = "${spring.kafka.topic.alert}")
    public void onAlert(ConsumerRecord<String, String> consumerRecord) {
        log.debug("alert request received for key : {} and value : {}", consumerRecord.key(), consumerRecord.value());
        try {
            MDC.put(EPayAuthenticationConstant.CORRELATION_ID, String.valueOf(UUID.randomUUID()));
            MDC.put(EPayAuthenticationConstant.SCENARIO, "reportAlertListener");
            ReportAlertDto reportAlertDto = objectMapper.readValue(consumerRecord.value(), ReportAlertDto.class);
            alertService.generateAlertForReport(reportAlertDto);
        } catch (MerchantException e) {
            log.error("MerchantException while processing kafka listening message[key:{} and value: {}], error: {}", consumerRecord.key(), consumerRecord.value(), e.getErrorMessage());
        } catch (JsonProcessingException e) {
            log.error("Json parsing error while processing kafka listening message[key:{} and value: {}], error: {}", consumerRecord.key(), consumerRecord.value(), e.getMessage());
        }
    }
}
@@ public interface AlertManagementRepository extends JpaRepository<AlertManagement
    @Query("UPDATE AlertManagement a SET a.isViewed = true WHERE a.mId = :mId AND a.alertIdentifier = :alertIdentifier")
    void updateAlertViewStatus(@Param("mId") String mId, @Param("alertIdentifier") long alertIdentifier);

@@ -19,5 +20,6 @@ import java.util.UUID;
public interface AlertMasterRepository extends JpaRepository<AlertMaster, UUID> {

    List<AlertMaster> findAllByName(String name);
    

    Optional<AlertMaster> findByName(String reportName);
}
aLERTSERVICE

    /**
     * Update the report Status after it got downloaded
     *
     * @return
     */
    public void generateAlertForReport(ReportAlertDto reportAlertDto) {
        log.info("Updating reportStatus '{}'  for mID '{}'", reportAlertDto.getReportName(), reportAlertDto.getMId());
        alertDao.generateAlertForReport(reportAlertDto);
    }
merchantconstant
 public static final String REPORT_GENERATION = "Report Generation";

REATE TABLE ALERT_MANAGEMENT (
ALTER TABLE ALERT_MANAGEMENT ADD ALERT_DESCRIPTION VARCHAR2(500);

-- changeset Subhra:4
ALTER TABLE ALERT_MANAGEMENT ADD ALERT_IDENTIFIER NUMBER(20) UNIQUE;
\ No newline at end of file
ALTER TABLE ALERT_MANAGEMENT ADD ALERT_IDENTIFIER NUMBER(20) UNIQUE;


--changeset Rahul Kumar:3
INSERT INTO ALERT_MASTER(NAME, DESCRIPTION, CREATED_AT)
VALUES ('Report Generation', '{0} Report has been generated for download',
(SELECT ROUND(((TRUNC(SYSTIMESTAMP,'MI')-DATE '1970-01-01') * 24 * 60 * 60) + EXTRACT (SECOND FROM SYSTIMESTAMP), 3)*1000 FROM DUAL));
