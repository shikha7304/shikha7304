/**
 * Class Name: AdminController
 * *
 * Description:
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@RestController
@RequestMapping("/admin")
@RequiredArgsConstructor
public class AdminController {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(AdminController.class);
    private final AdminService adminService;

    /**
     * Onboard a merchant and merchant admin user.
     * Destination: AdminService.onboardingMerchant
     *
     * @param onboardingRequest OnboardingDto
     * @return MerchantResponse
     */
    @PostMapping("/onboarding")
    @Operation(summary = "Onboarding Merchant and Merchant Admin user creation API for SBI Admin Usages.", description = "Create Merchant and Merchant Admin User, API can be accessed by SBI Admin only.")
    public MerchantResponse<OnboardingResponse> onboardingMerchant(@RequestBody OnboardingRequest onboardingRequest) {
        log.info("Onboarding Merchant called : onboardingRequest {}", onboardingRequest);
        return adminService.onboardingMerchant(onboardingRequest);
    }

    /**
     * Create a merchant entity group.
     * Destination: AdminService.createMerchantEntityGroup
     *
     * @param merchantEntityGroupRequest MerchantEntityGroupRequest
     * @return MerchantResponse
     */
    @PostMapping("/entity")
    @Operation(summary = "Entity Creation for set Of Merchants MIds", description = "SBI Admin will use this API to create Merchant Groups which will be named as Entity.")
    public MerchantResponse<MerchantEntityGroupResponse> createMerchantEntityGroup(@RequestBody MerchantEntityGroupRequest merchantEntityGroupRequest) {
        log.info("Entity Creation : merchantRequest {}", merchantEntityGroupRequest);
        return adminService.createMerchantEntityGroup(merchantEntityGroupRequest);
    }

    /**
     * Retrieve all users for a merchant.
     * Destination: AdminService.getAllMerchantUsers
     *
     * @param mid      String
     * @param pageable Pageable
     * @return MerchantResponse
     */
    @GetMapping("/users/{mid}")
    @Operation(summary = "Share all users info for the merchant.", description = "Share all users info for the merchant.")
    public MerchantResponse<MerchantUserResponse> getAllUser(@PathVariable String mid, @PageableDefault(size = 50, page = 0) Pageable pageable) {
        log.info("Received request to get userList based on mid: {}", mid);
        return adminService.getAllMerchantUsers(mid, pageable);
    }

    /**
     * Update help and support details for a merchant.
     * Destination: AdminService.saveHelpSupport
     *
     * @param mId                  String
     * @param helpSupportRequest   HelpSupportRequest
     * @return MerchantResponse
     */
    @PutMapping("/help/{mId}")
    @Operation(summary = "Update help and support details for the merchant.", description = "Update help and support details for the merchant.")
    public MerchantResponse<HelpSupportResponse> saveHelpSupport(@PathVariable String mId, @RequestBody HelpSupportRequest helpSupportRequest) {
        log.info("Update Help & Support mId[{}] and helpSupportRequest: {}", mId, helpSupportRequest);
        return adminService.saveHelpSupport(mId, helpSupportRequest);
    }

    /**
     * Map a user to an entity.
     * Destination: AdminService.userEntityMapping
     *
     * @param userEntityMappingRequest UserEntityMappingRequest
     * @return MerchantResponse
     */
    @PostMapping("/entity/mapping")
    public MerchantResponse<String> userEntityMapping(@RequestBody UserEntityMappingRequest userEntityMappingRequest) {
        log.info("Received request for mapping with details: {}", userEntityMappingRequest);
        return adminService.userEntityMapping(userEntityMappingRequest);
    }
}


/**
 * Service Class: AdminService
 * *
 * Description: Handles business logic related to merchant administration.
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version: 1.0
 */
@Service
@RequiredArgsConstructor
public class AdminService {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final AdminDao adminDao;

    /**
     * Onboard a merchant and merchant admin user.
     * Destination: AdminDao.onboardingMerchantAndMerchantUser
     *
     * @param onboardingRequest OnboardingRequest
     * @return MerchantResponse with OnboardingResponse
     */
    public MerchantResponse<OnboardingResponse> onboardingMerchant(OnboardingRequest onboardingRequest) {
        log.info("Onboarding merchant with request: {}", onboardingRequest);
        OnboardingDto onboardingDto = adminDao.onboardingMerchantAndMerchantUser(onboardingRequest);
        return MerchantResponse.success(mapToOnboardingResponse(onboardingDto));
    }

    /**
     * Create a merchant entity group.
     * Destination: AdminDao.saveMerchantEntityGroup
     *
     * @param merchantEntityGroupRequest MerchantEntityGroupRequest
     * @return MerchantResponse with MerchantEntityGroupResponse
     */
    public MerchantResponse<MerchantEntityGroupResponse> createMerchantEntityGroup(MerchantEntityGroupRequest merchantEntityGroupRequest) {
        log.info("Creating merchant entity group: {}", merchantEntityGroupRequest);
        MerchantEntityGroupDto entityGroupDto = adminDao.saveMerchantEntityGroup(mapToMerchantEntityGroupDto(merchantEntityGroupRequest));
        return MerchantResponse.success(mapToMerchantEntityGroupResponse(entityGroupDto));
    }

    /**
     * Get all users for a merchant.
     * Destination: AdminDao.findAllMerchantUsersByMId
     *
     * @param mid String
     * @param pageable Pageable
     * @return MerchantResponse with MerchantUserResponse
     */
    public MerchantResponse<MerchantUserResponse> getAllMerchantUsers(String mid, Pageable pageable) {
        log.info("Fetching users for merchant ID: {}", mid);
        Page<MerchantUserDto> users = adminDao.findAllMerchantUsersByMId(mid, pageable);
        return MerchantResponse.success(mapToMerchantUserResponse(users));
    }

    /**
     * Update help and support details.
     * Destination: AdminDao.updateHelpSupport
     *
     * @param mId String
     * @param helpSupportRequest HelpSupportRequest
     * @return MerchantResponse with HelpSupportResponse
     */
    public MerchantResponse<HelpSupportResponse> saveHelpSupport(String mId, HelpSupportRequest helpSupportRequest) {
        log.info("Updating Help & Support for merchant ID: {}", mId);
        adminDao.updateHelpSupport(mId, mapToHelpSupportEntity(helpSupportRequest));
        return MerchantResponse.success(null); // Success without specific response body
    }

    /**
     * Map a user to an entity.
     * Destination: AdminDao.updateUserRole
     *
     * @param userEntityMappingRequest UserEntityMappingRequest
     * @return MerchantResponse with mapping status
     */
    public MerchantResponse<String> userEntityMapping(UserEntityMappingRequest userEntityMappingRequest) {
        log.info("Mapping user entity: {}", userEntityMappingRequest);
        adminDao.updateUserRole(
                userEntityMappingRequest.getUserId(),
                userEntityMappingRequest.getUserName(),
                userEntityMappingRequest.getEntityId()
        );
        return MerchantResponse.success("Mapping Successful");
    }
}

/**
 * DAO Class: AdminDao
 * *
 * Description: Handles database interactions for merchant administration.
 * *
 * Author: Bhushan Wadekar
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version: 1.0
 */
@Component
@RequiredArgsConstructor
public class AdminDao {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final MerchantRepository merchantRepository;
    private final MerchantUserDao merchantUserDao;
    private final MerchantEntityGroupRepository merchantEntityGroupRepository;
    private final MerchantMapper mapper;

    /**
     * Create onboarding records in the database.
     * Destination: MerchantRepository.save, MerchantUserDao.saveMerchantUser
     *
     * @param onboardingRequest OnboardingRequest
     * @return OnboardingDto
     */
    @Transactional
    public OnboardingDto onboardingMerchantAndMerchantUser(OnboardingRequest onboardingRequest) {
        log.info("Onboarding merchant and merchant user: {}", onboardingRequest);

        // Save merchant details
        MerchantInfo merchantInfo = mapper.mapMerchantDtoToEntity(onboardingRequest.getMerchant());
        merchantInfo.setStatus(MerchantStatus.ACTIVE.name());
        merchantInfo = merchantRepository.save(merchantInfo);

        // Save merchant user details
        MerchantUserDto merchantUserDto = merchantUserDao.saveMerchantUser(onboardingRequest.getUser(), merchantInfo.getMId());

        // Build response DTO
        return OnboardingDto.builder()
                .merchant(mapper.mapMerchantInfoEntityToDto(merchantInfo))
                .user(merchantUserDto)
                .build();
    }

    /**
     * Check if a merchant exists by merchant ID.
     * Destination: MerchantRepository.existsByMIdAndStatus
     *
     * @param mId String
     * @return boolean
     */
    public boolean isMerchantExistByMId(String mId) {
        log.info("Checking if merchant exists with ID: {}", mId);
        return merchantRepository.existsBymIdAndStatus(mId, MerchantStatus.ACTIVE.name());
    }

    /**
     * Get all merchant users by merchant ID.
     * Destination: MerchantUserDao.getAllMerchantUsersByMId
     *
     * @param mId String
     * @param pageable Pageable
     * @return Page<MerchantUserDto>
     */
    public Page<MerchantUserDto> findAllMerchantUsersByMId(String mId, Pageable pageable) {
        log.info("Fetching users for merchant ID: {}", mId);
        return merchantUserDao.getAllMerchantUsersByMId(mId, pageable);
    }

    /**
     * Save a merchant entity group.
     * Destination: MerchantEntityGroupRepository.saveAll
     *
     * @param merchantEntityGroupDto MerchantEntityGroupDto
     * @return MerchantEntityGroupDto
     */
    public MerchantEntityGroupDto saveMerchantEntityGroup(MerchantEntityGroupDto merchantEntityGroupDto) {
        log.info("Saving merchant entity group: {}", merchantEntityGroupDto);
        List<MerchantEntityGroup> merchantEntityGroups = merchantEntityGroupDto.getMIds().stream()
                .map(mId -> MerchantEntityGroup.builder()
                        .entityId(merchantEntityGroupDto.getEntityId())
                        .mId(mId)
                        .build())
                .collect(Collectors.toList());
        merchantEntityGroupRepository.saveAll(merchantEntityGroups);
        return merchantEntityGroupDto;
    }

    /**
     * Update user roles for an entity.
     * Destination: MerchantUserDao.updateMerchantUserRole
     *
     * @param userId UUID
     * @param userName String
     * @param entityId String
     */
    public void updateUserRole(UUID userId, String userName, String entityId) {
        log.info("Updating user roles for user: {}, entity: {}", userName, entityId);
        merchantUserDao.updateMerchantUserRole(userId, userName, entityId);
    }
}
package com.epay.merchant.controller;

import com.epay.merchant.model.request.HelpSupportRequest;
import com.epay.merchant.model.request.MerchantEntityGroupRequest;
import com.epay.merchant.model.request.OnboardingRequest;
import com.epay.merchant.model.response.*;
import com.epay.merchant.model.request.UserEntityMappingRequest;
import com.epay.merchant.model.response.MerchantEntityGroupResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.model.response.MerchantUserResponse;
import com.epay.merchant.model.response.OnboardingResponse;
import com.epay.merchant.service.AdminService;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import io.swagger.v3.oas.annotations.Operation;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.*;

/**
 * Class Name: AdminController
 * *
 * Description:
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@RestController
@RequestMapping("/admin")
@RequiredArgsConstructor
public class AdminController {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(AdminController.class);
    private final AdminService adminService;

    /**
     * @param onboardingRequest OnboardingDto
     * @return MerchantResponse
     */
    @PostMapping("/onboarding")
    @Operation(summary = "Onboarding Merchant and Merchant Admin user creation API for SBI Admin Usages.", description = "Create Merchant and Merchant Admin User, API can be access by SBI Admin only.")
    public MerchantResponse<OnboardingResponse> onboardingMerchant(@RequestBody OnboardingRequest onboardingRequest) {
        log.info("Onboarding Merchant called : onboardingRequest {}", onboardingRequest);
        return adminService.onboardingMerchant(onboardingRequest);

    }

    /**
     * create Merchant Entity Group
     * @param merchantEntityGroupRequest MerchantEntityGroupRequest
     * @return MerchantResponse
     */
    @PostMapping("/entity")
    @Operation(summary = "Entity Creation for set Of Merchants MIds", description = "SBI Admin will use this API to create Merchant Groups which will named as Entity")
    public MerchantResponse<MerchantEntityGroupResponse> createMerchantEntityGroup(@RequestBody MerchantEntityGroupRequest merchantEntityGroupRequest) {
        log.info("Entity Creation : merchantRequest {}", merchantEntityGroupRequest);
        return adminService.createMerchantEntityGroup(merchantEntityGroupRequest);
    }

    /**
     * Get All User
     * @param mid String
     * @param pageable Pageable
     * @return MerchantResponse
     */
    @GetMapping("/users/{mid}")
    @Operation(summary = "share the all users info for that merchant.", description = "share the all users info for that merchant.")
    public MerchantResponse<MerchantUserResponse> getAllUser(@PathVariable String mid, @PageableDefault(size = 50, page = 0) Pageable pageable) {
        log.info("Received request to get userList based on mid: {}", mid);
        return adminService.getAllMerchantUsers(mid, pageable);
    }

    @PutMapping("/help/{mId}")
    @Operation(summary = "share the all users info for that merchant.", description = "share the all users info for that merchant.")
    public MerchantResponse<HelpSupportResponse> saveHelpSupport(@PathVariable String mId, @RequestBody HelpSupportRequest helpSupportRequest) {
        log.info("Update Help & Support mId[{}] and helpSupportRequest: {}", mId, helpSupportRequest);
        return adminService.saveHelpSupport(mId, helpSupportRequest);
    }

    @PostMapping("/entity/mapping")
    public MerchantResponse<String> userEntityMapping(@RequestBody UserEntityMappingRequest userEntityMappingRequest) {
        log.info("Received request for mapping with details: {}", userEntityMappingRequest);
        return adminService.userEntityMapping(userEntityMappingRequest);
    }
}



package com.epay.merchant.controller;

import com.epay.merchant.model.request.HelpSupportRequest;
import com.epay.merchant.model.request.MerchantEntityGroupRequest;
import com.epay.merchant.model.request.OnboardingRequest;
import com.epay.merchant.model.response.*;
import com.epay.merchant.model.request.UserEntityMappingRequest;
import com.epay.merchant.model.response.MerchantEntityGroupResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.model.response.MerchantUserResponse;
import com.epay.merchant.model.response.OnboardingResponse;
import com.epay.merchant.service.AdminService;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import io.swagger.v3.oas.annotations.Operation;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.*;

/**
 * Class Name: AdminController
 * *
 * Description:
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@RestController
@RequestMapping("/admin")
@RequiredArgsConstructor
public class AdminController {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(AdminController.class);
    private final AdminService adminService;

    /**
     * @param onboardingRequest OnboardingDto
     * @return MerchantResponse
     */
    @PostMapping("/onboarding")
    @Operation(summary = "Onboarding Merchant and Merchant Admin user creation API for SBI Admin Usages.", description = "Create Merchant and Merchant Admin User, API can be access by SBI Admin only.")
    public MerchantResponse<OnboardingResponse> onboardingMerchant(@RequestBody OnboardingRequest onboardingRequest) {
        log.info("Onboarding Merchant called : onboardingRequest {}", onboardingRequest);
        return adminService.onboardingMerchant(onboardingRequest);

    }

    /**
     * create Merchant Entity Group
     * @param merchantEntityGroupRequest MerchantEntityGroupRequest
     * @return MerchantResponse
     */
    @PostMapping("/entity")
    @Operation(summary = "Entity Creation for set Of Merchants MIds", description = "SBI Admin will use this API to create Merchant Groups which will named as Entity")
    public MerchantResponse<MerchantEntityGroupResponse> createMerchantEntityGroup(@RequestBody MerchantEntityGroupRequest merchantEntityGroupRequest) {
        log.info("Entity Creation : merchantRequest {}", merchantEntityGroupRequest);
        return adminService.createMerchantEntityGroup(merchantEntityGroupRequest);
    }

    /**
     * Get All User
     * @param mid String
     * @param pageable Pageable
     * @return MerchantResponse
     */
    @GetMapping("/users/{mid}")
    @Operation(summary = "share the all users info for that merchant.", description = "share the all users info for that merchant.")
    public MerchantResponse<MerchantUserResponse> getAllUser(@PathVariable String mid, @PageableDefault(size = 50, page = 0) Pageable pageable) {
        log.info("Received request to get userList based on mid: {}", mid);
        return adminService.getAllMerchantUsers(mid, pageable);
    }

    @PutMapping("/help/{mId}")
    @Operation(summary = "share the all users info for that merchant.", description = "share the all users info for that merchant.")
    public MerchantResponse<HelpSupportResponse> saveHelpSupport(@PathVariable String mId, @RequestBody HelpSupportRequest helpSupportRequest) {
        log.info("Update Help & Support mId[{}] and helpSupportRequest: {}", mId, helpSupportRequest);
        return adminService.saveHelpSupport(mId, helpSupportRequest);
    }

    @PostMapping("/entity/mapping")
    public MerchantResponse<String> userEntityMapping(@RequestBody UserEntityMappingRequest userEntityMappingRequest) {
        log.info("Received request for mapping with details: {}", userEntityMappingRequest);
        return adminService.userEntityMapping(userEntityMappingRequest);
    }
}


package com.epay.merchant.dao;

import com.epay.merchant.dto.MerchantEntityGroupDto;
import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.dto.OnboardingDto;
import com.epay.merchant.entity.MerchantEntityGroup;
import com.epay.merchant.entity.MerchantInfo;
import com.epay.merchant.mapper.MerchantMapper;
import com.epay.merchant.model.request.OnboardingRequest;
import com.epay.merchant.repository.MerchantEntityGroupRepository;
import com.epay.merchant.repository.MerchantRepository;
import com.epay.merchant.util.enums.MerchantStatus;
import com.epay.merchant.util.enums.UserStatus;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * Class Name: MerchantDAO
 * *
 * Description:
 * *
 * Author: V1017903(bhushan wadekar)
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@Component
@RequiredArgsConstructor
public class AdminDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantRepository merchantRepository;
    private final MerchantUserDao merchantUserDao;
    private final MerchantEntityGroupRepository merchantEntityGroupRepository;
    private final MerchantMapper mapper;

    /**
     * Creating onboarding records in database.
     *
     * @param onboardingRequest OnboardingDto
     * @return OnboardingDto
     */
    @Transactional
    public OnboardingDto onboardingMerchantAndMerchantUser(OnboardingRequest onboardingRequest) {
        // Step 1 : Onboard Merchant
        MerchantInfo merchantInfo = mapper.mapMerchantDtoToEntity(onboardingRequest.getMerchant());
        merchantInfo.setStatus(MerchantStatus.ACTIVE.name());
        merchantInfo = merchantRepository.save(merchantInfo);
        // Step 2 : Onboard Merchant User
        MerchantUserDto merchantUserDto = merchantUserDao.saveMerchantUser(onboardingRequest.getUser(), merchantInfo.getMId());
        // Step 3 : Build Onboarding response
        return OnboardingDto.builder().merchant(mapper.mapMerchantInfoEntityToDto(merchantInfo)).user(merchantUserDto).build();
    }

    public boolean isMerchantExistByMId(String mId) {
        return merchantRepository.existsBymIdAndStatus(mId, MerchantStatus.ACTIVE.name());
    }

    public boolean isMerchantUserExist(String userName, String email, String mobilePhone) {
        return merchantUserDao.existsByUserNameOrEmailOrMobilePhoneAndStatus(userName, email, mobilePhone, UserStatus.ACTIVE);
    }

    public boolean isMerchantUserExistWithRoles(String userName, List<String> roles) {
        return merchantUserDao.existsByUserNameOrEmailOrMobilePhoneAndRoles(userName, roles);
    }

    public boolean isMerchantUserExistWithRoles(UUID userId, List<String> roles) {
        return merchantUserDao.existsByUserIdAndRoles(userId, roles);
    }

    public Page<MerchantUserDto> findAllMerchantUsersByMId(String mId, Pageable pageable) {
        return merchantUserDao.getAllMerchantUsersByMId(mId, pageable);
    }

    public List<String> findMappedEntityMIds(List<String> mIds) {
        return merchantEntityGroupRepository.findExistingMIds(mIds);
    }

    public List<String> findInvalidsMIds(List<String> mIds) {
        List<String> inActiveMIds = new ArrayList<>(mIds);
        List<String> activeMIds = merchantRepository.findActiveMIds(mIds);
        inActiveMIds.removeAll(activeMIds);
        return inActiveMIds;
    }

    public boolean isEntityIdPresent(String entityId) {
        return merchantEntityGroupRepository.existsByEntityId(entityId);
    }

    public MerchantEntityGroupDto saveMerchantEntityGroup(MerchantEntityGroupDto merchantEntityGroupDto) {
        List<MerchantEntityGroup> merchantEntityGroups = merchantEntityGroupDto.getMIds().stream().map(mId -> MerchantEntityGroup.builder().entityId(merchantEntityGroupDto.getEntityId()).mId(mId).build()).collect(Collectors.toList());
        merchantEntityGroupRepository.saveAll(merchantEntityGroups);
        return merchantEntityGroupDto;
    }


    public void updateUserRole(UUID userId, String userName, String entityId) {
        merchantUserDao.updateMerchantUserRole(userId, userName, entityId);
    }
}


