@startuml

skinparam classBorderColor Black
skinparam classFontColor Black
skinparam shadowing false
skinparam classBackgroundColor White  // Default Background for Uncolored Classes

class CustomerController << (C,White) >> #Orange {
    - customerService: CustomerService
    + createCustomer(customerRequest: CustomerRequest): TransactionResponse<OrderResponse>
    + getCustomer(String customerId): TransactionResponse<CustomerResponse>
    + updateCustomerStatus(String customerId, String status): TransactionResponse<CustomerResponse>
}

class CustomerService << (C,White) >> #Green {
    - customerValidator: CustomerValidator
    - customerDao: CustomerDAO
    - UniqueIDGenerator: uniqueIDGenerator
    - EncryptionDecryptionUtil: encryptionDecryptionUtil
    - ObjectMapper: objectMapper
    + saveCustomer(String customerRequest, String): CustomerResponse
    + getCustomerByCustomerId(UUID customerId): CustomerResponse
    + updateCustomerStatus(String customerId, String status): CustomerResponse
}

class CustomerValidator << (C,White) >> #Cyan {
    + validateCustomerRequest(CustomerRequest customerRequest)
    + validateUniqueCustomer(CustomerDto customerDto)
    + validateMandatoryFields(CustomerDto customerDto)
    + validateFieldsValue(CustomerDto customerDto)
}

class CustomerDAO << (C,White) >> #DarkCyan {
    - customerRepository: CustomerRepository
    + getCustomerByCustomerId(String customerId): Optional<CustomerDto> 
    + saveCustomer(CustomerDto customerDto): CustomerDto
    + updateCustomerStatus(UUID customerId, String status): CustomerDto
}

class CustomerRepository << (C,White) >> #Blue {
    + findByCustomerId(String customerId): Optional<Customer>
    + saveCustomer(Customer customer): Customer
    + updateCustomerStatus(String status): Customer
    + existsByCustomerId(String customerId): boolean
}

class Customer << (C,White) >> #Yellow {
    - id: UUID
    - name: String
    - email: String
    - phone: String
    - status: String
    - createdAt: Date
    - updatedAt: Date
    + getId(): UUID
    + getName(): String
    + getEmail(): String
    + getPhone(): String
    + getStatus(): String
}

CustomerController --> CustomerService
CustomerService --> CustomerValidator
CustomerService --> CustomerDAO
CustomerService --> EncryptionDecryptionUtil
CustomerDAO --> CustomerRepository
CustomerDAO --> Customer

@enduml







public void downloadCsvFile(HttpServletResponse response, String fileName, List<String> headerName, List<List<Object>> rows) {
    try {
        response.setContentType("text/csv");
        response.setCharacterEncoding("UTF-8"); // Ensure proper encoding
        String formattedFileName = fileName + "_" + System.currentTimeMillis() + ".csv";
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + formattedFileName + "\"");

        writeCSV(headerName, rows, response.getOutputStream());
        response.flushBuffer(); // Ensure the response is properly flushed
    } catch (Exception e) {
        log.error("Error occurred during CSV File downloading: {}", e.getMessage());
        throw new MerchantException(ErrorConstants.FILE_GENERATION_ERROR_CODE,
                MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "csv", e.getMessage()));
    }
}

private void writeCSV(List<String> headers, List<List<Object>> rows, OutputStream outputStream) {
    CSVFormat csvFormat = CSVFormat.DEFAULT.builder()
            .setHeader(headers.toArray(new String[0])) // Ensure headers are set
            .setSkipHeaderRecord(false) // Ensure headers are included
            .build();

    try (CSVPrinter csvPrinter = new CSVPrinter(new OutputStreamWriter(outputStream, "UTF-8"), csvFormat)) {
        for (List<Object> row : rows) {
            csvPrinter.printRecord(row); // Print each row properly
        }
        csvPrinter.flush();
    } catch (Exception e) {
        log.error("Failed to write in CSV: ", e);
        throw new MerchantException(ErrorConstants.FILE_GENERATION_ERROR_CODE, 
                MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "csv", e.getMessage()));
    }
}



*/
    public void downloadMerchantUserReport(HttpServletResponse response, MerchantUserRequestList merchantUserRequestList) {
        log.info("Fetching list of merchant users {} ", merchantUserRequestList);
        Map<UUID, MerchantUserRoleDto> roleMap = merchantUserRoleDao.getUserRoleDtoMap();
        List<MerchantUserDto> merchantUserResponseList = merchantUserDao.getMerchantUsers(merchantUserRequestList);
        log.info("Returning list of merchant users {}", merchantUserResponseList);
        List<List<Object>> fileData = merchantUserResponseList.stream().map(user -> convertToListOfObject(roleMap.get(user.getRole()).getRole(), user)).toList();
        csvGenerator.downloadCsvFile(response, "merchant_users", USER_DOWNLOAD_HEADER, fileData);
        log.info("Generated CSV file containing list of merchant user");
    }

package com.epay.merchant.util.file.generator;

import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.util.ErrorConstants;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.text.StringEscapeUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;

import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.text.MessageFormat;
import java.util.List;

@Component
public class CSVGenerator {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     *
     * @param response HttpServletResponse
     * @param fileName String
     * @param headerName headerName
     * @param rows List
     */
    public void downloadCsvFile(HttpServletResponse response, String fileName, List<String> headerName, List<List<Object>> rows) {
        try {
            writeCSV(headerName, rows, response.getOutputStream());
            response.setContentType("text/csv");
            response.setHeader(HttpHeaders.CONTENT_DISPOSITION,"attachment;filename=" + fileName + "_" + System.currentTimeMillis() + ".csv");
        } catch (Exception e) {
            log.error("Error occurred during CSV File downloading : {}", e.getMessage());
            throw new MerchantException(ErrorConstants.FILE_GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "csv", e.getMessage()));
        }
    }

    /**
     * Writing CSV header and rows in output stream.
     * @param headers List
     * @param rows List
     * @param outputStream OutputStream
     */
    private void writeCSV(List<String> headers, List<List<Object>> rows, OutputStream outputStream) {
        CSVFormat csvFormat = CSVFormat.DEFAULT.builder().setHeader(headers.toArray(String[]::new)).build();
        try (CSVPrinter csvPrinter = new CSVPrinter(new OutputStreamWriter(outputStream), csvFormat)) {
            for (List<Object> row : rows) {
                for (Object value : row)
                    csvPrinter.print(value);
            }
        } catch (Exception e) {
            log.error("Failed to write in CSV: ", e);
            throw new MerchantException(ErrorConstants.FILE_GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "csv", e.getMessage()));
        }
    }
}
