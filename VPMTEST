package com.epay.merchant.service;

import com.epay.merchant.dao.HelpSupportDao;
import com.epay.merchant.dto.HelpSupportTeamDto;
import com.epay.merchant.model.response.HelpSupportResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.validator.HelpSupportValidator;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Class Name: HelpSupportService
 * *
 * Description:
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@Service
@RequiredArgsConstructor
public class HelpSupportService {

    private final HelpSupportValidator helpSupportValidator;
    private final HelpSupportDao helpSupportDao;

    /**
     * Get Team information.
     * @return OnboardingDto
     */
    public MerchantResponse<HelpSupportResponse> getTeamsInfo(String mId) {
        //Step 1 : Get Active teams from DB.
        helpSupportValidator.validateCreateHelpSupportRequest(mId);
        List<HelpSupportResponse> teams = helpSupportDao.getTeam(mId);
        //Step 2 : Build MerchantResponse and return to caller
        return MerchantResponse.<HelpSupportResponse>builder().data(teams).status(MerchantConstant.RESPONSE_SUCCESS).count((long) teams.size()).build();
    }
    /**
     * Update Team information.
     * @param mId String
     * @param helpSupportTeamDto HelpSupportTeamDto
     * @return MerchantResponse
     */
    public MerchantResponse<HelpSupportResponse> updateTeam(String mId, HelpSupportTeamDto helpSupportTeamDto) {
        helpSupportTeamDto.setMId(mId);
        //Step 1 : HelpSupportValidator validation
        helpSupportValidator.validateUpdateHelpSupportRequest(helpSupportTeamDto);
        //Step 2 : Save the Merchant and Merchant User Data in DB
        HelpSupportResponse helpSupportResponses = helpSupportDao.updateTeam(helpSupportTeamDto);
        //Step 3 : Build MerchantResponse and return to caller
        return MerchantResponse.<HelpSupportResponse>builder().data(List.of(helpSupportResponses)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).build();
    }
}


package com.epay.merchant.validator;

import com.epay.merchant.dao.HelpSupportDao;
import com.epay.merchant.dto.ErrorDto;
import com.epay.merchant.dto.HelpSupportTeamDto;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.util.enums.HelpSupportType;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.text.MessageFormat;
import java.util.ArrayList;

/**
 * Class Name: HelpSupportValidator
 * *
 * Description: A validator class for user validation requests.
 * Extends the BaseValidator to provide common validation functionality.
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */

@Component
@RequiredArgsConstructor
public class HelpSupportValidator extends BaseValidator {
    private static final LoggerUtility logger = LoggerFactoryUtility.getLogger(HelpSupportValidator.class);
    private final HelpSupportDao helpSupportDao;
    /**
     * Validates the user validation request.
     * * @param helpSupportTeamDto the request object containing user details to be validated.
     */
    public void validateCreateHelpSupportRequest(String mId) {
        logger.debug("HelpSupport validation start for mId: {}", mId);
        errorDtoList = new ArrayList<>();
        checkMandatoryField(mId, "mId");
        validatedAlreadyPresent(mId);
        logger.debug("HelpSupport field validation completed for {}", mId);
    }
    public void validateUpdateHelpSupportRequest(HelpSupportTeamDto helpSupportTeamDto) {
        logger.debug("HelpSupport validation start for HelpSupportTeamDto: {}", helpSupportTeamDto);
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(helpSupportTeamDto);
        validateFieldsValue(helpSupportTeamDto);
        validatedAlreadyPresent(helpSupportTeamDto.getMId());
    }
    /**
     * Validates that all mandatory fields in the request are present.
     * * @param helpSupportTeamDto the request object containing user details to be validated.
     */
    private void validateMandatoryFields(HelpSupportTeamDto helpSupportTeamDto) {
        checkMandatoryField(helpSupportTeamDto.getMId(), "MId");
        checkMandatoryField(helpSupportTeamDto.getValue(), "Value");
        throwIfErrors();
    }
    /**
     * Validates the values of fields in the request object.
     * * @param helpSupportTeamDto the request object containing user details to be validated.
     */
    private void validateFieldsValue(HelpSupportTeamDto helpSupportTeamDto) {
        if(helpSupportTeamDto.getType() == HelpSupportType.EMAIL)
            validateFieldWithRegex(helpSupportTeamDto.getValue(), MerchantConstant.EMAIL_LENGTH, MerchantConstant.EMAIL_REGEX, "Email", "Please check {0} Format or Max length");
        if(helpSupportTeamDto.getType() == HelpSupportType.PHONE_NUMBER)
            validateFieldWithRegex(helpSupportTeamDto.getValue(), MerchantConstant.PHONE_REGEX, "Phone Number", "Please check Phone Number Format for {0}");
        throwIfErrors();
    }

    /**
     * validatedAlreadyPresent
     * @param mId String
     */
    void validatedAlreadyPresent(String mId) {
        if (!helpSupportDao.isExistsByMId(mId)) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.NOT_FOUND_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "MId")).build());
        }
        throwIfErrors();
    }
}



#########################


package com.epay.merchant.service;

import com.epay.merchant.dao.HelpSupportDao;
import com.epay.merchant.dto.HelpSupportTeamDto;
import com.epay.merchant.model.response.HelpSupportResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.util.enums.HelpSupportType;
import com.epay.merchant.validator.HelpSupportValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class HelpSupportServiceTest {

    @Mock
    private HelpSupportValidator helpSupportValidator;

    @Mock
    private HelpSupportDao helpSupportDao;

    @InjectMocks
    private HelpSupportService helpSupportService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetTeamsInfo_Success() {
        String mId = "123";
        List<HelpSupportResponse> mockTeams = List.of(new HelpSupportResponse(HelpSupportType.EMAIL,"Test","ACTIVE"));

        when(helpSupportDao.getTeam(mId)).thenReturn(mockTeams);

        MerchantResponse<HelpSupportResponse> response = helpSupportService.getTeamsInfo(mId);

        verify(helpSupportValidator, times(1)).validateCreateHelpSupportRequest(mId);
        verify(helpSupportDao, times(1)).getTeam(mId);

        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals(mockTeams, response.getData());
        assertEquals(1L, response.getCount());
    }

    @Test
    void testUpdateTeam_Success() {
        String mId = "123";
        HelpSupportTeamDto helpSupportTeamDto = new HelpSupportTeamDto();
        HelpSupportResponse mockResponse = new HelpSupportResponse(HelpSupportType.EMAIL,"Test","ACTIVE");

        when(helpSupportDao.updateTeam(helpSupportTeamDto)).thenReturn(mockResponse);

        MerchantResponse<HelpSupportResponse> response = helpSupportService.updateTeam(mId, helpSupportTeamDto);

        verify(helpSupportValidator, times(1)).validateUpdateHelpSupportRequest(helpSupportTeamDto);
        verify(helpSupportDao, times(1)).updateTeam(helpSupportTeamDto);

        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals(1L, response.getCount());
        assertEquals(mockResponse, response.getData().get(0));
    }
}


package com.epay.merchant.validator;

import com.epay.merchant.dao.HelpSupportDao;
import com.epay.merchant.dto.HelpSupportTeamDto;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.util.enums.HelpSupportType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

class HelpSupportValidatorTest {

    @Mock
    private HelpSupportDao helpSupportDao;

    @InjectMocks
    private HelpSupportValidator helpSupportValidator;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testValidateCreateHelpSupportRequest_Success() {
        String mId = "123";
        when(helpSupportDao.isExistsByMId(mId)).thenReturn(true);

        helpSupportValidator.validateCreateHelpSupportRequest(mId);

        verify(helpSupportDao, times(1)).isExistsByMId(mId);
    }

    @Test
    void testValidateUpdateHelpSupportRequest_Success() {
        HelpSupportTeamDto helpSupportTeamDto = new HelpSupportTeamDto();
        helpSupportTeamDto.setMId("123");
        helpSupportTeamDto.setType(HelpSupportType.EMAIL);
        helpSupportTeamDto.setValue("test@example.com");

        when(helpSupportDao.isExistsByMId(helpSupportTeamDto.getMId())).thenReturn(true);

        helpSupportValidator.validateUpdateHelpSupportRequest(helpSupportTeamDto);

        verify(helpSupportDao, times(1)).isExistsByMId(helpSupportTeamDto.getMId());
    }

    @Test
    void testValidateMandatoryFields_ThrowsError() {
        HelpSupportTeamDto helpSupportTeamDto = new HelpSupportTeamDto();
        helpSupportTeamDto.setMId(null);
        helpSupportTeamDto.setValue(null);

        try {
            helpSupportValidator.validateUpdateHelpSupportRequest(helpSupportTeamDto);
        } catch (Exception e) {
            assertEquals(ErrorConstants.MANDATORY_FIELD_ERROR_CODE, e.getMessage());
        }
    }

    @Test
    void testValidateFieldsValue_InvalidEmail() {
        HelpSupportTeamDto helpSupportTeamDto = new HelpSupportTeamDto();
        helpSupportTeamDto.setType(HelpSupportType.EMAIL);
        helpSupportTeamDto.setValue("invalid-email");

        try {
            helpSupportValidator.validateUpdateHelpSupportRequest(helpSupportTeamDto);
        } catch (Exception e) {
            assertEquals("Please check Email Format or Max length", e.getMessage());
        }
    }
}
@Test
void testValidatedAlreadyPresent_NotFound() {
    // Arrange
    String mId = "invalidMId";
    when(helpSupportDao.isExistsByMId(mId)).thenReturn(false);

    // Act & Assert
    Exception exception = assertThrows(Exception.class, () -> helpSupportValidator.validatedAlreadyPresent(mId));
    verify(helpSupportDao, times(1)).isExistsByMId(mId);

    // Assert the error message
    String expectedMessage = ErrorConstants.NOT_FOUND_ERROR_MESSAGE.replace("{0}", "MId");
    assertTrue(exception.getMessage().contains(expectedMessage));
}



@Test
void testValidatedAlreadyPresent_Success() {
    // Arrange
    String mId = "validMId";
    when(helpSupportDao.isExistsByMId(mId)).thenReturn(true);

    // Act
    helpSupportValidator.validatedAlreadyPresent(mId);

    // Assert
    verify(helpSupportDao, times(1)).isExistsByMId(mId);
    // No exceptions should be thrown
}

