Below are the class definitions with proper descriptions for each class mentioned in your request:

1. Entity Class: TokenManagement

package com.epay.merchant.entity;

import com.epay.merchant.util.enums.TokenStatus;
import jakarta.persistence.*;
import lombok.*;

import java.util.UUID;

/**
 * Class Name: TokenManagement
 * 
 * Description: 
 * This entity represents the `TOKEN_MANAGEMENT` table, 
 * which stores information about tokens, their status, validity, 
 * expiration time, and associated user details.
 * 
 * Author: [Your Name]
 * 
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * 
 * Version: 1.0
 */
@EqualsAndHashCode(callSuper = true)
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "TOKEN_MANAGEMENT")
public class TokenManagement extends AuditEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @Version
    private int version;

    private UUID userId;

    private String token;

    private Long tokenExpiryTime;

    private boolean isValid;

    @Enumerated(EnumType.STRING)
    private TokenStatus tokenStatus;

    private String remarks;
}

2. DTO Class: MerchantUserDto

package com.epay.merchant.dto;

import com.epay.merchant.util.enums.UserStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;
import java.util.UUID;

/**
 * Class Name: MerchantUserDto
 * 
 * Description: 
 * This DTO is used to transfer merchant user data between 
 * different layers of the application. It includes essential 
 * user details like name, email, phone numbers, role, and status.
 * 
 * Author: Bhoopendra Rajput
 * 
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * 
 * Version: 1.0
 */
@Data
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL)
@AllArgsConstructor
@NoArgsConstructor
public class MerchantUserDto implements Serializable {

    @JsonIgnore
    private UUID id;

    @JsonIgnore
    private UUID parentUserId;

    @JsonIgnore
    private int version;

    private String userName;
    private String firstName;
    private String middleName;
    private String lastName;
    private String email;
    private String primaryPhone;
    private String secondaryPhone;
    private String mobilePhone;
    private String officePhone;

    @JsonProperty("country")
    private String countryCode;

    @JsonProperty("state")
    private String stateCode;

    @JsonProperty("pincode")
    private String pinCode;

    private String city;
    private String remark;

    @JsonIgnore
    private UUID role;

    private String roleName;

    private UserStatus status;

    @JsonIgnore
    private String password;

    @JsonIgnore
    private Long passwordExpiryTime;

    @JsonIgnore
    private int loginFailAttempt;

    private String createdBy;
    private Long createdAt;
    private String updatedBy;
    private Long updatedAt;
}

3. Configuration Class: MerchantConfig

package com.epay.merchant.config;

import lombok.Data;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

/**
 * Class Name: MerchantConfig
 * 
 * Description: 
 * This configuration class manages application-level properties, including 
 * settings for CAPTCHA, token expiry, user password policies, SMS gateway, 
 * and email configurations.
 * 
 * Author: V1017903 (Bhushan Wadekar)
 * 
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * 
 * Version: 1.0
 */
@Data
@Configuration
public class MerchantConfig {

    @Value("${kaptcha.border}")
    private String border;

    @Value("${kaptcha.textproducer.font.color}")
    private String fontColor;

    @Value("${kaptcha.textproducer.char.space}")
    private String charSpace;

    @Value("${kaptcha.image.width}")
    private String imageWidth;

    @Value("${kaptcha.image.height}")
    private String imageHeight;

    @Value("${kaptcha.textproducer.font.size}")
    private String fontSize;

    @Value("${kaptcha.textproducer.char.length}")
    private String charLength;

    @Value("${captcha.expiry.time.minutes:5}")
    private int expiryTime;

    @Value("${merchant.user.password.expiry.months:3}")
    private int passwordExpiryMonths;

    @Value("${otp.expiry.time.minutes:5}")
    private int otpExpiryTime;

    @Value("${merchant.encryption.key.expiry.time.days:30}")
    private int encryptionKeyExpiryTime;

    @Value("${merchant.api.key.expiry.time.month:12}")
    private int apiKeyExpiryTime;

    @Value("${merchant.user.password.key}")
    private String decryptionKey;

    @Value("${merchant.user.login.allowed.fail.attempt:3}")
    private int allowedLoginFailAttempt;

    @Value("${token.expiry.time.minutes:30}")
    private int tokenExpiryTime;

    @Value("${theme.logo.dimension.height:100}")
    private int logoHeight;

    @Value("${theme.logo.dimension.width:100}")
    private int logoWidth;

    @Value("${theme.logo.size.max:16KB}")
    private String logoMaxSize;

    @Value("${external.api.sms.gateway.base.path}")
    private String smsBasePath;

    @Value("${external.api.sms.gateway.user}")
    private String smsUserName;

    @Value("${external.api.sms.gateway.password}")
    private String smsPassword;

    @Value("${external.api.sms.body.content.type:text}")
    private String smsContentType;

    @Value("${external.api.sms.body.sender.id:SBIBNK}")
    private String smsSenderId;

    @Value("${external.api.sms.body.int.flag:0}")
    private int smsIntFlag;

    @Value("${external.api.sms.body.charging:0}")
    private int smsCharging;

    @Value("${external.api.sms.gateway.url:/bmg/sms/epaypgotpdom}")
    private String smsURL;

    @Value("${email.recipient:}")
    private String recipient;

    @Value("${email.from}")
    private String from;
}

These descriptions should help document the purpose and usage of each class effectively. Let me know if further modifications are required!






package com.epay.merchant.dao;

import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.enums.UserStatus;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.text.MessageFormat;
import java.util.List;

/**
 * Class Name: ValidationDao
 * 
 * Description:
 * ValidationDao is responsible for performing validations on merchant user data and merchant IDs (MIDs).
 * It provides methods to validate if a merchant user exists, if they are active, and if they have access to a specific MID.
 * 
 * Responsibilities:
 * - Validate merchant user details based on username, email, or phone number.
 * - Verify merchant user status.
 * - Validate access to MIDs and active MIDs.
 * 
 * Author: Ravi Rathore
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved.
 * 
 * Version: 1.0
 */
@Component
@RequiredArgsConstructor
public class ValidationDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final MerchantUserDao merchantUserDao;
    private final MerchantInfoDao merchantInfoDao;

    /**
     * Validates if the merchant user exists in the database and is active.
     * 
     * @param userName the username, email, or phone number of the merchant user.
     * @return true if the merchant user is valid and active.
     * @throws MerchantException if the merchant user is not active or does not exist.
     */
    public boolean validatedMerchantUser(String userName) {
        log.info("Validating merchant user with userName: {}", userName);
        MerchantUserDto merchantUser = merchantUserDao.getByUserNameOrEmailOrMobilePhoneAndStatus(
                userName, userName, userName, List.of(UserStatus.values()));
        
        log.info("Merchant user fetched with status: {}", merchantUser.getStatus());
        if (!UserStatus.ACTIVE.equals(merchantUser.getStatus())) {
            log.error("Invalid merchant user status: {}", merchantUser.getStatus());
            throw new MerchantException(ErrorConstants.INVALID_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, 
                    "Merchant User", "User is " + merchantUser.getStatus()));
        }
        log.info("Merchant user validated successfully for userName: {}", userName);
        return true;
    }

    /**
     * Validates if the given user has access to the specified merchant ID (MID).
     * 
     * @param userName the username of the merchant user.
     * @param mId      the merchant ID to validate access for.
     * @return true if the user has access to the MID.
     */
    public boolean validatedMId(String userName, String mId) {
        log.info("Validating MID access for userName: {} and mId: {}", userName, mId);
        boolean isValid = merchantInfoDao.validateMIdAccess(userName, mId);
        log.info("MID validation result for userName: {}, mId: {} is {}", userName, mId, isValid);
        return isValid;
    }

    /**
     * Validates if the given user has access to an active merchant ID (MID).
     * 
     * @param userName the username of the merchant user.
     * @param mId      the merchant ID to validate.
     * @return true if the user has access to the active MID.
     */
    public boolean validatedActiveMId(String userName, String mId) {
        log.info("Validating active MID access for userName: {} and mId: {}", userName, mId);
        boolean isActive = merchantInfoDao.validateActiveMIdAccess(userName, mId);
        log.info("Active MID validation result for userName: {}, mId: {} is {}", userName, mId, isActive);
        return isActive;
    }
}


package com.epay.merchant.dao;

import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.entity.MerchantUser;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.repository.MerchantUserRepository;
import com.epay.merchant.util.EPayIdentityUtil;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.enums.UserStatus;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.text.MessageFormat;
import java.util.List;

/**
 * Class Name: ValidationDao
 * *
 * Description:
 * *
 * Author: Ravi Rathore
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@Component
@RequiredArgsConstructor
public class ValidationDao {

    private final MerchantUserDao merchantUserDao;
    private final MerchantInfoDao merchantInfoDao;

    /**
     * Check if the user exists in DB
     *  @param userName String
     * @return boolean
     */
    public boolean validatedMerchantUser(String userName) {
        MerchantUserDto merchantUser = merchantUserDao.getByUserNameOrEmailOrMobilePhoneAndStatus(userName, userName, userName, List.of(UserStatus.values()));
        if(!UserStatus.ACTIVE.equals(merchantUser.getStatus())){
            throw new MerchantException(ErrorConstants.INVALID_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Merchant User","User is "+merchantUser.getStatus()));
        }
        return true;
    }

    public boolean validatedMId(String userName, String mId) {
        return merchantInfoDao.validateMIdAccess(userName, mId);
    }

    public boolean validatedActiveMId(String userName, String mId) {
        return merchantInfoDao.validateActiveMIdAccess(userName, mId);
    }

}



package com.epay.merchant.entity;

import com.epay.merchant.util.enums.TokenStatus;
import jakarta.persistence.*;
import lombok.*;

import java.util.UUID;

@EqualsAndHashCode(callSuper = true)
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "TOKEN_MANAGEMENT")
public class TokenManagement extends AuditEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;
    @Version
    private int version;
    private UUID userId;
    private String token;
    private Long tokenExpiryTime;
    private boolean isValid;
    @Enumerated(EnumType.STRING)
    private TokenStatus tokenStatus;
    private String remarks;

}
package com.epay.merchant.dto;

import com.epay.merchant.util.enums.UserStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;
import java.util.UUID;

/**
 * Class Name: MerchantUserDto
 * *
 * Description:
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@Data
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL)
@AllArgsConstructor
@NoArgsConstructor
public class MerchantUserDto implements Serializable {
    @JsonIgnore
    private UUID id;
    @JsonIgnore
    private UUID parentUserId;
    @JsonIgnore
    private int version;
    private String userName;
    private String firstName;
    private String middleName;
    private String lastName;
    private String email;
    private String primaryPhone;
    private String secondaryPhone;
    private String mobilePhone;
    private String officePhone;
    @JsonProperty("country")
    private String countryCode;
    @JsonProperty("state")
    private String stateCode;
    @JsonProperty("pincode")
    private String pinCode;
    private String city;
    private String remark;
    @JsonIgnore
    private UUID role;
    private String roleName;
    private UserStatus status;
    @JsonIgnore
    private String password;
    @JsonIgnore
    private Long passwordExpiryTime;
    @JsonIgnore
    private int loginFailAttempt;
    private String createdBy;
    private Long createdAt;
    private String updatedBy;
    private Long updatedAt;
}
package com.epay.merchant.config;

import lombok.Data;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

/**
 * Class Name: MerchantConfig
 * *
 * Description:
 * *
 * Author: V1017903(bhushan wadekar)
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */

@Data
@Configuration
public class MerchantConfig {

    @Value("${kaptcha.border}")
    private String border;

    @Value("${kaptcha.textproducer.font.color}")
    private String fontColor;

    @Value("${kaptcha.textproducer.char.space}")
    private String charSpace;

    @Value("${kaptcha.image.width}")
    private String imageWidth;

    @Value("${kaptcha.image.height}")
    private String imageHeight;

    @Value("${kaptcha.textproducer.font.size}")
    private String fontSize;

    @Value("${kaptcha.textproducer.char.length}")
    private String charLength;

    @Value("${captcha.expiry.time.minutes:5}")
    private int expiryTime;

    @Value("${merchant.user.password.expiry.months:3}")
    private int passwordExpiryMonths;

    @Value("${otp.expiry.time.minutes:5}")
    private int otpExpiryTime;

    @Value("${merchant.encryption.key.expiry.time.days:30}")
    private int encryptionKeyExpiryTime;

    @Value("${merchant.api.key.expiry.time.month:12}")
    private int apiKeyExpiryTime;

    @Value("${merchant.user.password.key}")
    private String decryptionKey;

    @Value("${merchant.user.login.allowed.fail.attempt:3}")
    private int allowedLoginFailAttempt;

    @Value("${token.expiry.time.minutes:30}")
    private int tokenExpiryTime;

    @Value("${theme.logo.dimension.height:100}")
    private int logoHeight;

    @Value("${theme.logo.dimension.width:100}")
    private int logoWidth;

    @Value("${theme.logo.size.max:16KB}")
    private String logoMaxSize;

    @Value("${external.api.sms.gateway.base.path}")
    private String smsBasePath;

    @Value("${external.api.sms.gateway.user}")
    private String smsUserName;

    @Value("${external.api.sms.gateway.password}")
    private String smsPassword;

    @Value("${external.api.sms.body.content.type:text}")
    private String smsContentType;

    @Value("${external.api.sms.body.sender.id:SBIBNK}")
    private String smsSenderId;

    @Value("${external.api.sms.body.int.flag:0}")
    private int smsIntFlag;

    @Value("${external.api.sms.body.charging:0}")
    private int smsCharging;

    @Value("${external.api.sms.gateway.url:/bmg/sms/epaypgotpdom}")
    private String smsURL;

    @Value("${email.recipient:}")
    private String recipient;

    @Value("${email.from}")
    private String from;
}
