@Test
    void testGetMerchantUserProfile_UserNotFound() {
        when(merchantUserDao.getByUserNameOrEmailOrMobilePhoneAndStatus(any(), any(), any(), any())).thenThrow(new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "UserName")));

        MerchantException exception = assertThrows(MerchantException.class, () -> merchantUserService.getMerchantUserProfile());
        assertEquals(ErrorConstants.NOT_FOUND_ERROR_CODE, exception.getErrorCode());
        assertTrue(exception.getMessage().contains("UserName"));

        verify(merchantUserDao, times(1)).getByUserNameOrEmailOrMobilePhoneAndStatus(any(), any(), any(), any());
        verifyNoInteractions(merchantMapper);
    }


public MerchantResponse<UserProfileResponse> getMerchantUserProfile() {

        // Step 1 : Get UserName from Security Context
        String userName = EPayIdentityUtil.getUserPrincipal().getUsername();

        // Step 2 : Get Merchant User Info of Logged in Merchant User
        UserProfileResponse userProfileResponse = merchantUserDao.getMerchantUserProfile(userName, UserStatus.ACTIVE);

        // Step 3 : Building the response
        return MerchantResponse.<UserProfileResponse>builder().status(MerchantConstant.RESPONSE_SUCCESS).data(List.of(userProfileResponse)).count(1L).total(1L).build();
    }


public class EPayIdentityUtil {

    public static EPayPrincipal getUserPrincipal() {
       return (EPayPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    }
}


 public String getUsername() {
        return this.authenticationKey;
    }
