package com.epay.merchant.dao;

import com.epay.merchant.dto.OtpGenerationDto;
import com.epay.merchant.entity.NotificationManagement;
import com.epay.merchant.repository.NotificationManagementRepository;
import com.epay.merchant.util.enums.KeyType;
import com.epay.merchant.util.enums.NotificationEntityType;
import com.epay.merchant.util.enums.NotificationType;
import com.epay.merchant.util.enums.RequestType;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Component
@RequiredArgsConstructor
public class NotificationDao {

    private final NotificationManagementRepository notificationManagementRepository;
    /**
     * This method will save and notify the user upon otp generation
     * @param otpGenerationDto OtpGenerationDto
     * @param content String
     * @param status int
     * @param notificationType NotificationType
     */
    public void saveOtpGenerationNotification(OtpGenerationDto otpGenerationDto, String content, int status, NotificationType notificationType) {
        NotificationManagement notificationMgmt = NotificationManagement.builder().notificationType(notificationType).entityName(NotificationEntityType.OTP_MANAGEMENT).entityId(otpGenerationDto.getId()).requestType(otpGenerationDto.getRequestType().getName()).content(content).status(status).build();
        sendNotificationRequest(notificationType);
        notificationManagementRepository.save(notificationMgmt);
    }
    /**
     * It will save the key generation notification details in notificationMgmt table
     * @param notificationType NotificationType
     * @param status int
     * @param content String
     * @param entityId UUID
     * @param keyType KeyType
     */
    public void saveKeyGenerationNotification(KeyType keyType, UUID entityId, String content, int status, NotificationType notificationType) {
        NotificationManagement notificationMgmt = NotificationManagement.builder().notificationType(notificationType).entityName(NotificationEntityType.KEY_MANAGEMENT).entityId(entityId).requestType(keyType.name()).content(content).status(status).build();
        sendNotificationRequest(notificationType);
        notificationManagementRepository.save(notificationMgmt);
    }
    /**
     * It will notify user upon successful user creation
     * @param notificationType NotificationType
     * @param  status int
     * @param  content  String
     * @param entityId UUID
     */
    public void sendUserCreationNotification(UUID entityId, String content, int status, NotificationType notificationType) {
        NotificationManagement notificationMgmt = NotificationManagement.builder()
                .notificationType(notificationType)
                .entityName(NotificationEntityType.MERCHANT_USER)
                .entityId(entityId)
                .requestType("UserCreation")
                .content(content).status(status).build();
        sendNotificationRequest(notificationType);
        notificationManagementRepository.save(notificationMgmt);
    }
    /**
     * Send password notification based on the notificationType
     * @param requestType,entityId,content,status,notificationType
     */
    public void sendPasswordNotification(RequestType requestType, UUID entityId, String content, int status, NotificationType notificationType) {
        NotificationManagement notificationMgmt = NotificationManagement.builder()
                .notificationType(notificationType)
                .entityName(NotificationEntityType.PASSWORD_MANAGEMENT)
                .entityId(entityId)
                .requestType(requestType.getName())
                .content(content).status(status).build();
        sendNotificationRequest(notificationType);
        notificationManagementRepository.save(notificationMgmt);
    }
    /**
     * This method will invoke send notification request based on notification type
     * @param notificationType NotificationType
     */
    private void sendNotificationRequest(NotificationType notificationType) {
        switch (notificationType) {
            case SMS -> sendSMS();
            case EMAIL -> sendEmail();
            case BOTH -> {
                sendSMS();
                sendEmail();
            }
        }
    }

    /**
     * Sending onboarding email.
     */
    private void sendEmail() {
        //TODO: Send email Notification
    }
    /**
     * Sending onboarding SMS.
     */
    private void sendSMS() {
        //TODO: Send SMS Notification
    }
}
