@Component
@RequiredArgsConstructor
public class CaptchaValidator extends BaseValidator {

    private final CaptchaDao captchaDao;

    /**
     * Validates all mandatory fields and checks for duplicate Request IDs in the CAPTCHA request.
     *
     * @param captchaRequest the incoming CAPTCHA request to validate
     * @throws ValidationException if any validation errors are found
     */
    public void requestValidator(CaptchaRequest captchaRequest) {
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(captchaRequest);
        checkForDuplicateRequestId(captchaRequest);
    }

    /**
     * Validates the CAPTCHA text and checks if it is expired.
     *
     * @param requestId    the unique request ID for the CAPTCHA
     * @param captchaText  the provided CAPTCHA text for validation
     * @throws ValidationException if the CAPTCHA is expired or the text does not match
     */
    public void captchaValueValidation(UUID requestId, String captchaText) {
        errorDtoList = new ArrayList<>();
        Captcha captchaDetails = captchaDao.getCaptchaByRequestId(requestId);
        validateCaptchaExpiry(DateTimeUtils.isPastDate(captchaDetails.getExpiryTime()));
        validateCaptchaText(captchaText, captchaDetails.getCaptchaText());
    }

    /**
     * Validates the mandatory fields in the CAPTCHA request.
     *
     * @param captchaRequest the CAPTCHA request to validate
     */
    private void validateMandatoryFields(CaptchaRequest captchaRequest) {
        checkMandatoryField(captchaRequest.getRequestId(), "RequestId");
        checkMandatoryField(captchaRequest.getRequestType(), "Request Type");
        throwIfErrors(); // Throws exception if validation errors exist
    }

    /**
     * Checks if the Request ID is a duplicate in the database.
     *
     * @param captchaRequest the CAPTCHA request to check
     */
    private void checkForDuplicateRequestId(CaptchaRequest captchaRequest) {
        if (captchaDao.existsByRequestId(captchaRequest.getRequestId())) {
            errorDtoList.add(ErrorDto.builder()
                    .errorCode(ErrorConstants.INVALID_ERROR_CODE)
                    .errorMessage(MessageFormat.format(
                            ErrorConstants.INVALID_ERROR_MESSAGE,
                            "RequestId",
                            "Reason: Duplicate RequestId"))
                    .build());
        }
        throwIfErrors();
    }

    /**
     * Checks if the CAPTCHA has expired.
     *
     * @param isExpired a boolean indicating if the CAPTCHA is expired
     */
    private void validateCaptchaExpiry(boolean isExpired) {
        if (isExpired) {
            errorDtoList.add(ErrorDto.builder()
                    .errorCode(ErrorConstants.EXPIRY_TIME_ERROR_CODE)
                    .errorMessage(MessageFormat.format(
                            ErrorConstants.EXPIRY_TIME_ERROR_MESSAGE,
                            "Captcha"))
                    .build());
        }
        throwIfErrors();
    }

    /**
     * Validates the provided CAPTCHA text against the text stored in the database.
     *
     * @param providedCaptchaText the CAPTCHA text provided by the user
     * @param storedCaptchaText   the CAPTCHA text stored in the database
     */
    private void validateCaptchaText(String providedCaptchaText, String storedCaptchaText) {
        if (!StringUtils.equals(providedCaptchaText, storedCaptchaText)) {
            errorDtoList.add(ErrorDto.builder()
                    .errorCode(ErrorConstants.NOT_FOUND_ERROR_CODE)
                    .errorMessage(MessageFormat.format(
                            ErrorConstants.NOT_FOUND_ERROR_MESSAGE,
                            "Captcha"))
                    .build());
        }
        throwIfErrors();
    }

}




package com.epay.merchant.validator;

import com.epay.merchant.dao.CaptchaDao;
import com.epay.merchant.dto.ErrorDto;
import com.epay.merchant.entity.Captcha;
import com.epay.merchant.model.request.CaptchaRequest;
import com.epay.merchant.util.DateTimeUtils;
import com.epay.merchant.util.ErrorConstants;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.UUID;

@Component
@RequiredArgsConstructor
public class CaptchaValidator extends BaseValidator {

    private final CaptchaDao captchaDao;

    /**
     * Validates all the mandatory fields present in the request and check for Duplicate RequestId.
     * @param captchaRequest CaptchaRequest
     */
    public void requestValidator(CaptchaRequest captchaRequest) {
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(captchaRequest);
        duplicateCheck(captchaRequest);
    }

    /**
     * Validates captcha expiry & text.
     * @param requestId UUID
     * @param captchaText Hash String
     */
    public void captchaValueValidation(UUID requestId, String captchaText) {
        errorDtoList = new ArrayList<>();
        Captcha captchaDetails = captchaDao.getCaptchaByRequestId(requestId);
        isCaptchaExpiry(DateTimeUtils.isPastDate(captchaDetails.getExpiryTime()));
        matchCaptcha(captchaText, captchaDetails.getCaptchaText());
    }

    private void validateMandatoryFields(CaptchaRequest captchaRequest) {
        checkMandatoryField(captchaRequest.getRequestId(), "RequestId");
        checkMandatoryField(captchaRequest.getRequestType(), "Request Type");
        throwIfErrors();
    }

    private void duplicateCheck(CaptchaRequest captchaRequest) {
        if (captchaDao.existsByRequestId(captchaRequest.getRequestId())) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.INVALID_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "RequestId", "Reason : Duplicate RequestId")).build());
        }
        throwIfErrors();
    }


    private void isCaptchaExpiry(boolean captchaDetails) {
        if (captchaDetails) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.EXPIRY_TIME_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.EXPIRY_TIME_ERROR_MESSAGE, "Captcha")).build());
        }
        throwIfErrors();
    }

    /**
     * Comparing request captchaTextHash with dbCaptchaTextHash
     * @param loginCaptchaImage String
     * @param dbCaptchaTextHash String
     */
    private void matchCaptcha(String loginCaptchaImage, String dbCaptchaTextHash) {
        if (!StringUtils.equals(loginCaptchaImage, dbCaptchaTextHash)) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.NOT_FOUND_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "Captcha")).build());
        }
        throwIfErrors();
    }

}
