package com.epay.merchant.service;

import com.epay.merchant.dao.HelpSupportDao;
import com.epay.merchant.dto.HelpSupportDto;
import com.epay.merchant.model.request.HelpSupportRequest;
import com.epay.merchant.model.response.HelpSupportResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.validator.HelpSupportValidator;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Class Name: HelpSupportService
 * *
 * Description:
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@Service
@RequiredArgsConstructor
public class HelpSupportService {

    private final HelpSupportValidator helpSupportValidator;
    private final HelpSupportDao helpSupportDao;

    /**
     * Get Team information.
     *
     * @return OnboardingDto
     */
    public MerchantResponse<HelpSupportResponse> getHelpSupports(String mId) {
        //Step 1 : Validate mId
        helpSupportValidator.validatedHelpSupportMId(mId);
        //Step 2 : Get Help Support Data from DB.
        List<HelpSupportDto> helpSupport = helpSupportDao.getHelpSupports(mId);
        HelpSupportResponse helpSupportResponse = HelpSupportResponse.builder().helpSupports(helpSupport).build();
        //Step 2 : Build MerchantResponse and return to caller
        return MerchantResponse.<HelpSupportResponse>builder().data(List.of(helpSupportResponse)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).build();
    }

    /**
     * Update Team information.
     *
     * @param mId                String
     * @param helpSupportRequest HelpSupportRequest
     * @return MerchantResponse
     */
    public MerchantResponse<HelpSupportResponse> saveHelpSupport(String mId, HelpSupportRequest helpSupportRequest) {
        //Step 1 : HelpSupportValidator validation
        helpSupportValidator.validateHelpSupportRequest(mId, helpSupportRequest);
        //Step 2 : Save the Merchant and Merchant User Data in DB
        List<HelpSupportDto> helpSupport = helpSupportDao.saveHelpSupport(mId, helpSupportRequest);
        HelpSupportResponse helpSupportResponse = HelpSupportResponse.builder().helpSupports(helpSupport).build();
        //Step 3 : Build MerchantResponse and return to caller
        return MerchantResponse.<HelpSupportResponse>builder().data(List.of(helpSupportResponse)).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).build();
    }
}


package com.epay.merchant.dao;

import com.epay.merchant.dto.HelpSupportDto;
import com.epay.merchant.entity.HelpSupport;
import com.epay.merchant.mapper.HelpSupportMapper;
import com.epay.merchant.model.request.HelpSupportRequest;
import com.epay.merchant.repository.HelpSupportRepository;
import com.epay.merchant.util.enums.MerchantStatus;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import java.util.ArrayList;
import java.util.List;

import static com.epay.merchant.util.MerchantConstant.STATUS_ACTIVE;
import static com.epay.merchant.util.MerchantConstant.STATUS_IN_ACTIVE;

/**
 * Class Name: HelpSupportDao
 * *
 * Description: DB layer logic for Help and Support
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@Component
@RequiredArgsConstructor
public class HelpSupportDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(HelpSupportDao.class);
    private final HelpSupportRepository helpSupportRepository;
    private final MerchantInfoDao merchantInfoDao;
    private final HelpSupportMapper helpSupportMapper;

    /**
     * Creating Help and Support team records in database.
     *
     * @return HelpSupportResponse
     */
    public List<HelpSupportDto> getHelpSupports(String mId) {
        List<HelpSupport> helpSupports = helpSupportRepository.findBymIdAndStatus(mId, STATUS_ACTIVE);
        if (CollectionUtils.isEmpty(helpSupports)) {
            helpSupports = helpSupportRepository.findBymIdIsNull();
        }
        return helpSupportMapper.mapEntityListToDtoList(helpSupports);
    }

    /**
     * Updating Help and Support team record in database.
     *
     * @param mId                String
     * @param helpSupportRequest HelpSupportRequest
     * @return HelpSupportResponse
     */
    @Transactional
    public List<HelpSupportDto> saveHelpSupport(String mId, HelpSupportRequest helpSupportRequest) {
        List<HelpSupport> helpSupports = new ArrayList<>();
        for (HelpSupportDto helpSupportDto : helpSupportRequest.getHelpSupports()) {
            HelpSupport helpSupport = helpSupportRepository.findByMidAndType(mId, helpSupportDto.getType()).orElse(HelpSupport.builder().mId(mId).type(helpSupportDto.getType()).build());
            helpSupport.setValue(helpSupportDto.getValue());
            helpSupport.setStatus(helpSupportDto.isStatus() ? STATUS_ACTIVE : STATUS_IN_ACTIVE);
            helpSupports.add(helpSupport);
        }
        helpSupports = helpSupportRepository.saveAll(helpSupports);
        return helpSupportMapper.mapEntityListToDtoList(helpSupports);
    }

    /**
     * Is MId exist in the system.
     *
     * @param mId String
     * @return boolean
     */
    public boolean isValidMerchant(String mId) {
        return merchantInfoDao.isExistsByMIdAndStatus(mId, MerchantStatus.ACTIVE.name());
    }
}

package com.epay.merchant.model.response;

import com.epay.merchant.dto.HelpSupportDto;
import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

/**
 * Class Name: HelpSupportResponse
 * *
 * Description: To send response of Help and Support.
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class HelpSupportResponse {

    private List<HelpSupportDto> helpSupports;
}




package com.epay.merchant.service;

import com.epay.merchant.dao.HelpSupportDao;
import com.epay.merchant.dto.HelpSupportDto;
import com.epay.merchant.model.request.HelpSupportRequest;
import com.epay.merchant.model.response.HelpSupportResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.validator.HelpSupportValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class HelpSupportServiceTest {

    private HelpSupportValidator validator;
    private HelpSupportDao dao;
    private HelpSupportService service;

    @BeforeEach
    void setUp() {
        validator = mock(HelpSupportValidator.class);
        dao = mock(HelpSupportDao.class);
        service = new HelpSupportService(validator, dao);
    }

    @Test
    void testGetHelpSupports() {
        String mId = "testMId";
        List<HelpSupportDto> helpSupports = List.of(new HelpSupportDto());
        when(dao.getHelpSupports(mId)).thenReturn(helpSupports);

        MerchantResponse<HelpSupportResponse> response = service.getHelpSupports(mId);

        verify(validator).validatedHelpSupportMId(mId);
        verify(dao).getHelpSupports(mId);
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals(1, response.getCount());
    }

    @Test
    void testSaveHelpSupport() {
        String mId = "testMId";
        HelpSupportRequest request = new HelpSupportRequest();
        List<HelpSupportDto> helpSupports = List.of(new HelpSupportDto());
        when(dao.saveHelpSupport(mId, request)).thenReturn(helpSupports);

        MerchantResponse<HelpSupportResponse> response = service.saveHelpSupport(mId, request);

        verify(validator).validateHelpSupportRequest(mId, request);
        verify(dao).saveHelpSupport(mId, request);
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals(1, response.getCount());
    }
}


package com.epay.merchant.dao;

import com.epay.merchant.dto.HelpSupportDto;
import com.epay.merchant.entity.HelpSupport;
import com.epay.merchant.mapper.HelpSupportMapper;
import com.epay.merchant.model.request.HelpSupportRequest;
import com.epay.merchant.repository.HelpSupportRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class HelpSupportDaoTest {

    private HelpSupportRepository repository;
    private HelpSupportMapper mapper;
    private HelpSupportDao dao;

    @BeforeEach
    void setUp() {
        repository = mock(HelpSupportRepository.class);
        mapper = mock(HelpSupportMapper.class);
        dao = new HelpSupportDao(repository, null, mapper);
    }

    @Test
    void testGetHelpSupports() {
        String mId = "testMId";
        List<HelpSupport> entities = List.of(new HelpSupport());
        List<HelpSupportDto> dtos = List.of(new HelpSupportDto());

        when(repository.findBymIdAndStatus(mId, "ACTIVE")).thenReturn(entities);
        when(mapper.mapEntityListToDtoList(entities)).thenReturn(dtos);

        List<HelpSupportDto> result = dao.getHelpSupports(mId);

        verify(repository).findBymIdAndStatus(mId, "ACTIVE");
        verify(mapper).mapEntityListToDtoList(entities);
        assertEquals(dtos, result);
    }

    @Test
    void testSaveHelpSupport() {
        String mId = "testMId";
        HelpSupportRequest request = new HelpSupportRequest();
        HelpSupport entity = new HelpSupport();
        List<HelpSupport> entities = List.of(entity);
        List<HelpSupportDto> dtos = List.of(new HelpSupportDto());

        when(repository.saveAll(any())).thenReturn(entities);
        when(mapper.mapEntityListToDtoList(entities)).thenReturn(dtos);

        List<HelpSupportDto> result = dao.saveHelpSupport(mId, request);

        verify(repository).saveAll(any());
        verify(mapper).mapEntityListToDtoList(entities);
        assertEquals(dtos, result);
    }
}

package com.epay.merchant.validator;

import com.epay.merchant.model.request.HelpSupportRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;

class HelpSupportValidatorTest {

    private HelpSupportValidator validator;

    @BeforeEach
    void setUp() {
        validator = new HelpSupportValidator();
    }

    @Test
    void testValidatedHelpSupportMId() {
        String validMId = "validMId";
        String invalidMId = null;

        assertDoesNotThrow(() -> validator.validatedHelpSupportMId(validMId));
        assertThrows(IllegalArgumentException.class, () -> validator.validatedHelpSupportMId(invalidMId));
    }

    @Test
    void testValidateHelpSupportRequest() {
        String mId = "testMId";
        HelpSupportRequest request = new HelpSupportRequest();

        assertDoesNotThrow(() -> validator.validateHelpSupportRequest(mId, request));
    }
}



