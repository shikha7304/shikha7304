package com.epay.merchant.service;

import com.epay.merchant.dao.LoginDao;
import com.epay.merchant.dto.ErrorDto;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.exception.ValidationException;
import com.epay.merchant.model.request.MerchantLoginRequest;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.util.enums.RequestType;
import com.epay.merchant.validator.MerchantLoginValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.text.MessageFormat;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static com.epay.merchant.util.MerchantConstant.RESPONSE_FAILURE;
import static com.epay.merchant.util.MerchantConstant.SUCCESS_MESSAGE;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class LoginServiceTest {

    @InjectMocks
    private LoginService loginService;

    @Mock
    private MerchantLoginValidator merchantLoginValidator;

    @Mock
    private TokenService tokenService;

    @Mock
    private LoginDao loginDao;

    private MerchantLoginRequest merchantLoginRequest;
    private UUID requestId;

    @BeforeEach
    void setUp() {
        requestId = UUID.randomUUID();
        merchantLoginRequest = MerchantLoginRequest.builder()
                .userName("testUser")
                .password("hashpassword")
                .requestId(requestId)
                .build();
    }

    @Test
    void testMerchantLogin_SuccessfulLogin() {
        doNothing().when(merchantLoginValidator).validateMerchantLoginRequest(merchantLoginRequest);
        doNothing().when(loginDao).saveLoginAudit(anyString(), eq(RequestType.LOGIN), eq(true), anyString());
        doNothing().when(loginDao).updateCaptchaIsVerified(requestId);

        MerchantResponse<Object> response = loginService.merchantLogin(merchantLoginRequest);

        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertNotNull(response.getData());
        assertTrue(response.getData().get(0).toString().contains("Logged In User Found"));

        verify(merchantLoginValidator).validateMerchantLoginRequest(merchantLoginRequest);
        verify(loginDao).saveLoginAudit(eq("testUser"), eq(RequestType.LOGIN), eq(true), anyString());
        verify(loginDao).updateCaptchaIsVerified(requestId);
    }

    @Test
    void testMerchantLogin_ValidationException() {
        ValidationException validationException = new ValidationException(List.of(new ErrorDto(ErrorConstants.MANDATORY_ERROR_CODE, "Mandatory field missing")));
        doThrow(validationException).when(merchantLoginValidator).validateMerchantLoginRequest(merchantLoginRequest);

        assertThrows(ValidationException.class, () -> loginService.merchantLogin(merchantLoginRequest));

        verify(merchantLoginValidator).validateMerchantLoginRequest(merchantLoginRequest);
        verify(loginDao, never()).saveLoginAudit(anyString(), any(), anyBoolean(), anyString());
    }

    @Test
    void testMerchantLogin_MerchantException() {
        MerchantException merchantException = new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE, "User not found");
        doThrow(merchantException).when(merchantLoginValidator).validateMerchantLoginRequest(merchantLoginRequest);

        MerchantResponse<Object> response = loginService.merchantLogin(merchantLoginRequest);

        assertEquals(RESPONSE_FAILURE, response.getStatus());
        assertEquals(1, response.getErrors().size());
        assertEquals(ErrorConstants.NOT_FOUND_ERROR_CODE, response.getErrors().get(0).getErrorCode());
    }

    @Test
    void testMerchantLogin_GenericException() {
        doThrow(new RuntimeException("Unexpected error")).when(merchantLoginValidator).validateMerchantLoginRequest(merchantLoginRequest);

        MerchantResponse<Object> response = loginService.merchantLogin(merchantLoginRequest);

        assertEquals(RESPONSE_FAILURE, response.getStatus());
        assertEquals(1, response.getErrors().size());
        assertEquals(ErrorConstants.GENERIC_ERROR_CODE, response.getErrors().get(0).getErrorCode());
    }

    @Test
    void testHandleLoginFailure_UserExists() {
        when(tokenService.updateMerchantUserForLogin("testUser", false)).thenReturn(3);

        MerchantResponse<Object> response = loginService.merchantLogin(merchantLoginRequest);

        assertEquals(RESPONSE_FAILURE, response.getStatus());
        assertEquals(1, response.getData().size());
        assertTrue(response.getData().get(0).toString().contains("loginFailAttempt"));

        verify(loginDao).saveLoginAudit(eq("testUser"), eq(RequestType.LOGIN), eq(false), anyString());
    }

    @Test
    void testHandleLoginFailure_UserNotFound() {
        when(tokenService.updateMerchantUserForLogin("testUser", false)).thenReturn(0);

        MerchantResponse<Object> response = loginService.merchantLogin(merchantLoginRequest);

        assertEquals(RESPONSE_FAILURE, response.getStatus());
        assertNotNull(response.getErrors());
    }

    @Test
    void testHandleLoginFailure_MerchantException() {
        doThrow(new MerchantException(ErrorConstants.LOCKED_ERROR_CODE, "Account locked"))
                .when(tokenService).updateMerchantUserForLogin(anyString(), anyBoolean());

        MerchantResponse<Object> response = loginService.merchantLogin(merchantLoginRequest);

        assertEquals(RESPONSE_FAILURE, response.getStatus());
        assertEquals(ErrorConstants.LOCKED_ERROR_CODE, response.getErrors().get(0).getErrorCode());
    }

    @Test
    void testHandleLoginFailure_GenericException() {
        doThrow(new RuntimeException("DB Connection Failed"))
                .when(tokenService).updateMerchantUserForLogin(anyString(), anyBoolean());

        MerchantResponse<Object> response = loginService.merchantLogin(merchantLoginRequest);

        assertEquals(RESPONSE_FAILURE, response.getStatus());
        assertEquals(ErrorConstants.GENERIC_ERROR_CODE, response.getErrors().get(0).getErrorCode());
    }
}











######

Below is an example user story for the “Generate Report Alert on Report Generation” task. This story mirrors the level of detail provided in the captcha implementation user story while focusing on consuming the reporting service and generating an alert message.

User Story Title:
Generate Alert Notification on Report Generation

User Story Description:
As a merchant, I want the system to automatically generate an alert notification when a report is successfully generated so that I am promptly notified and can download the report without delay.

Business Value:
This feature ensures that merchants are immediately aware when reports are available for download, improving responsiveness and operational efficiency.

Acceptance Criteria:
	1.	Alert Generation Trigger:
	•	When the reporting service completes a report generation, it publishes a message (e.g., via Kafka) containing report details.
	•	The system consumes this message using the ReportAlertListener.
	2.	Data Consumption and Processing:
	•	The consumed message is deserialized into a ReportAlertDto which includes:
	•	mId (merchant identifier)
	•	reportName (name of the generated report)
	•	Both fields are mandatory; if any are missing, the system logs an appropriate error and does not attempt to generate an alert.
	3.	Alert Creation:
	•	The AlertService.generateAlertForReport(ReportAlertDto reportAlertDto) method is invoked.
	•	Inside the service, the AlertDao.generateAlertForReport(reportAlertDto) method:
	•	Retrieves the alert configuration from the AlertMaster repository using a constant value (e.g., MerchantConstant.REPORT_GENERATION).
	•	Constructs an alert message by formatting the alert description from AlertMaster with the reportName from the DTO.
	•	Generates a unique alert identifier (using a utility method such as MerchantUtil.generateUnique12DigitNumber()).
	•	Persists the alert details in the ALERT_MANAGEMENT database table.
	4.	Success Scenario:
	•	A log entry is created stating that an alert has been generated for the given report and merchant.
	•	The alert record is stored in the database with the correct details (alert ID, description, unique identifier, mId, etc.).
	•	The overall system flow continues without interruption.
	5.	Failure Scenario:
	•	If the alert master record for “Report Generation” is not found, a MerchantException is thrown with an appropriate error code and message.
	•	All errors during alert generation (such as JSON parsing issues, data access exceptions, etc.) are logged and handled gracefully.
	6.	Logging and Traceability:
	•	Every step from message consumption, alert generation, to database persistence must be logged.
	•	The logs should include key data points such as reportName, mId, and the generated alert identifier.

API / Integration Details:
	•	Messaging:
	•	The system listens to the Kafka topic defined by ${spring.kafka.topic.alert}.
	•	The ReportAlertListener consumes messages, deserializes them into ReportAlertDto objects, and delegates alert generation to the AlertService.
	•	Data Structures:
	•	ReportAlertDto:

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ReportAlertDto {
    private String mId;
    private String reportName;
}


	•	Alert Generation Flow:
	•	The alert DAO retrieves the master alert configuration using the report generation constant.
	•	An AlertManagement entity is created with:
	•	alertId from AlertMaster
	•	alertDescription (formatted with the report name)
	•	A unique alertIdentifier
	•	isViewed set to false
	•	Associated mId
	•	The new alert is saved via the alertManagementRepository.

Testing Checklist:
	•	Verify that a Kafka message with valid mId and reportName triggers the alert generation flow.
	•	Confirm that an alert record is persisted in the ALERT_MANAGEMENT table with the expected details.
	•	Test edge cases such as:
	•	Missing or invalid reportName or mId.
	•	Duplicate messages (ensuring unique alert identifiers).
	•	Error handling when the alert master record is not found.
	•	Check that all alert generation events are properly logged with sufficient details for debugging.
	•	Validate unit test coverage is at least 90% for all alert-related components (DAO, Service, Listener).

Developer Checklist:
	•	Implement the AlertDao.generateAlertForReport(ReportAlertDto reportAlertDto) method.
	•	Implement the AlertService.generateAlertForReport(ReportAlertDto reportAlertDto) method.
	•	Configure and test the Kafka listener (ReportAlertListener) to consume messages.
	•	Ensure that all alert events are logged using LoggerUtility.
	•	Write and execute unit tests to achieve at least 90% code coverage.
	•	Validate database schema changes (e.g., ALERT_MANAGEMENT table, unique alert identifier column).

This user story covers the functional requirements, API/integration details, acceptance criteria, testing, and developer checklists needed to implement the report alert functionality. Adjust the details (e.g., naming conventions, error codes) as necessary to align with your existing project standards.






Description

For a merchant, we need to implement captcha mechanism during login, reset password functionality to prevent unauthorized access and ensure enhanced security for an application.

API Details

Method: Post

API Definition: /merchant/v1/captcha

Access Type: Open API

Request Body:



{
  "requestType": String,
  "requestId": String
}





        
      request Type need to be Enum and can hold the value - LOGIN, RESET_PASSWORD

        
      request Id need to be unique for each captcha request and need to maintain until Request complete.

        
      Both fields are mandatory


Success Response Body

{
  "data": [
    {
       "id": UUID,
       "captchaImage": BASE64,
       "expiryTime": long,
    }
   ],
  "status":1,
  "count": 1,
  "total": 1
}



Failure Response Body

{
  "status":0,
  "error": [
     {
       "errorCode": String,
       "errorMessage": String
     }
   ]
}



Testing Checklist


        
      Verify Captcha generation and image quality.

        
      Test with valid and invalid Captcha inputs.

        
      Check for edge cases like session expiration or multiple users.

        
      Ensure Captcha images are refreshed and expire as expected.

        
      Test Captcha functionality for edge cases (e.g., expiration, retries).

        
      Verify integration with the login API.


Developer Checklist

Class Flow



90% Unit test case coverage


Development Steps for Captcha Implementation 
Step 1: Add Captcha Library: com.github.penggle.kaptcha: 2.3.2 This library will be used to generate Captcha images and texts dynamically. 
Step 2: Configure Captcha Generator_ -_ Set up a Spring Bean to configure the Captcha properties. These properties include image dimensions, font size, text length, and other visual settings. 

@Configuration public class CaptchaConfig {      
@Bean     
public DefaultKaptcha captchaProducer() {         
       DefaultKaptcha captcha = new DefaultKaptcha();         
       Properties properties = new Properties();         properties.setProperty("kaptcha.border", "no");         properties.setProperty("kaptcha.textproducer.font.color", "black");         properties.setProperty("kaptcha.textproducer.char.space", "5");         properties.setProperty("kaptcha.image.width", "200");         properties.setProperty("kaptcha.image.height", "50");         properties.setProperty("kaptcha.textproducer.font.size", "40");         properties.setProperty("kaptcha.textproducer.char.length", "6");         captcha.setConfig(new Config(properties));         
       return captcha;     
} 
}  


This ensures Captcha images meet the required specifications. 
Step 3: Create Captcha Controller_ -_ Develop a REST Controller to expose the Captcha API endpoints for generation and validation. 

Generates a Captcha and returns it as a Base64-encoded string along with a unique Captcha ID and expiration time. 

Step 4: Develop Captcha Service_ -_ Create a service class to handle Captcha creation, conversion to Base64 format, and expiration logic.


        
      Generate Captcha text and image using DefaultKaptcha or Producer. 

        
      Convert the Captcha image to a Base64 string. 

        
      Set an expiration time for the Captcha based on configuration. 

Step 5: Create Captcha DAO and Repository 


        
      
Captcha Entity: Define a JPA entity to represent Captcha data, including: 
ID 
Captcha text 
Expiration time 
Request Id 
Request Type 

Created At 


        
      
Captcha Dao: To call the repository layer 


Captcha Repository: Use a Spring Data JPA repository to persist and retrieve Captcha information. 
Database Table- Captcha_Management



Column name


DataType


Nullable



ID
RAW
No


CAPTCHA_IMAGE
CLOB
No


EXPIRY_TIME
NUMBER
Yes


REQUEST_ID
RAW
No


REQUEST_TYPE
VARCHAR2(255 BYTE)
No


IS_VERIFIED
NUMBER(1,0)
Yes


CREATED_AT
NUMBER
No


UPDATED_AT
NUMBER
No


CAPTCHA_TEXT
VARCHAR2(200 BYTE)
Yes


VERSION
NUMBER
No


Summary of Key Components 


        
      
Library: Kaptcha for Captcha generation. 

        
      
Configuration: Defines Captcha appearance and behavior. 

        
      
Controller: Exposes endpoints for Captcha generation and validation. 

        
      
Service: Handles Captcha logic, including image creation, encoding, and storage. 

        
      
Repository: Stores Captcha data in the database for validation and expiration. 


Acceptance Criteria 


        
      Captcha should generate dynamically on each request with six random alphanumeric characters. 

        
      Captcha should expire after 5 minutes. 

        
      Validation should confirm the user-provided Captcha matches the stored Captcha. 

        
      Users can refresh the Captcha if needed. 

        
      All requests and responses must be logged for traceability. 


public class AlertDao 
/**
     * GenerateAlertForReport - sending alert for generated Report
     * @param reportAlertDto ReportAlertDto
     */
    public void generateAlertForReport(ReportAlertDto reportAlertDto) {
        AlertMaster alertMasterData = alertMasterRepository.findByName(MerchantConstant.REPORT_GENERATION).orElseThrow(()-> new MerchantException(ErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "Report Name")));
        AlertManagement alertManagement = AlertManagement.builder().alertId(alertMasterData.getId()).alertDescription(MessageFormat.format(alertMasterData.getDescription(), reportAlertDto.getReportName())).alertIdentifier(MerchantUtil.generateUnique12DigitNumber()).isViewed(false).mId(reportAlertDto.getMId()).build();
        log.info("generated Alert for ReportName: {}, mid : {}",reportAlertDto.getReportName(),reportAlertDto.getMId());
        alertManagementRepository.save(alertManagement);
    }
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ReportAlertDto {
    private String mId;
    private String reportName;
}

@Component
@RequiredArgsConstructor
public class ReportAlertListener {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final ObjectMapper objectMapper;
    private final AlertService alertService;

    @KafkaListener(topics = "${spring.kafka.topic.alert}")
    public void onAlert(ConsumerRecord<String, String> consumerRecord) {
        log.debug("alert request received for key : {} and value : {}", consumerRecord.key(), consumerRecord.value());
        try {
            MDC.put(EPayAuthenticationConstant.CORRELATION_ID, String.valueOf(UUID.randomUUID()));
            MDC.put(EPayAuthenticationConstant.SCENARIO, "reportAlertListener");
            ReportAlertDto reportAlertDto = objectMapper.readValue(consumerRecord.value(), ReportAlertDto.class);
            alertService.generateAlertForReport(reportAlertDto);
        } catch (MerchantException e) {
            log.error("MerchantException while processing kafka listening message[key:{} and value: {}], error: {}", consumerRecord.key(), consumerRecord.value(), e.getErrorMessage());
        } catch (JsonProcessingException e) {
            log.error("Json parsing error while processing kafka listening message[key:{} and value: {}], error: {}", consumerRecord.key(), consumerRecord.value(), e.getMessage());
        }
    }
}
@@ public interface AlertManagementRepository extends JpaRepository<AlertManagement
    @Query("UPDATE AlertManagement a SET a.isViewed = true WHERE a.mId = :mId AND a.alertIdentifier = :alertIdentifier")
    void updateAlertViewStatus(@Param("mId") String mId, @Param("alertIdentifier") long alertIdentifier);

@@ -19,5 +20,6 @@ import java.util.UUID;
public interface AlertMasterRepository extends JpaRepository<AlertMaster, UUID> {

    List<AlertMaster> findAllByName(String name);
    

    Optional<AlertMaster> findByName(String reportName);
}
aLERTSERVICE

    /**
     * Update the report Status after it got downloaded
     *
     * @return
     */
    public void generateAlertForReport(ReportAlertDto reportAlertDto) {
        log.info("Updating reportStatus '{}'  for mID '{}'", reportAlertDto.getReportName(), reportAlertDto.getMId());
        alertDao.generateAlertForReport(reportAlertDto);
    }
merchantconstant
 public static final String REPORT_GENERATION = "Report Generation";

REATE TABLE ALERT_MANAGEMENT (
ALTER TABLE ALERT_MANAGEMENT ADD ALERT_DESCRIPTION VARCHAR2(500);

-- changeset Subhra:4
ALTER TABLE ALERT_MANAGEMENT ADD ALERT_IDENTIFIER NUMBER(20) UNIQUE;
\ No newline at end of file
ALTER TABLE ALERT_MANAGEMENT ADD ALERT_IDENTIFIER NUMBER(20) UNIQUE;


--changeset Rahul Kumar:3
INSERT INTO ALERT_MASTER(NAME, DESCRIPTION, CREATED_AT)
VALUES ('Report Generation', '{0} Report has been generated for download',
(SELECT ROUND(((TRUNC(SYSTIMESTAMP,'MI')-DATE '1970-01-01') * 24 * 60 * 60) + EXTRACT (SECOND FROM SYSTIMESTAMP), 3)*1000 FROM DUAL));
