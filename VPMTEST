 public void downloadMerchantUserReport(HttpServletResponse response, MerchantUserRequestList merchantUserRequestList) {
        log.info("Fetching list of merchant users {} ", merchantUserRequestList);
        final Map<UUID, MerchantUserRoleDto> roleMap = merchantUserRoleDao.getUserRoleDtoMap();
        List<MerchantUserDto> merchantUserResponseList = merchantUserDao.getMerchantUsers(merchantUserRequestList);
        log.info("Returning list of merchant users {}", merchantUserResponseList);
        List<List<Object>> fileData = merchantUserResponseList.stream().map(user -> convertToListOfObject(roleMap.get(user.getRole()).getRole(), user)).toList();
        csvGenerator.downloadCsvFile(response, "merchant_users", USER_DOWNLOAD_HEADER, fileData);
        log.info("Generated CSV file containing list of merchant user");
    }
    /**
     * Converting OrderReport to List of its field values.
     *
     * @param roleName String
     * @param user {@link MerchantUserDto}
     * @return List
     */
    private List<Object> convertToListOfObject(String roleName, MerchantUserDto user) {
        List<Object> objectList = new ArrayList<>();
        objectList.add(StringUtils.isEmpty(String.valueOf(user.getId())) ? StringUtils.EMPTY : user.getId());
        objectList.add(StringUtils.isEmpty(user.getUserName()) ? StringUtils.EMPTY : user.getUserName());
        objectList.add(StringUtils.isEmpty(user.getFirstName()) ? StringUtils.EMPTY : user.getFirstName());//user.getLastName()
        objectList.add(StringUtils.isEmpty(user.getEmailMasked() ) ? StringUtils.EMPTY : user.getEmailMasked() );
        objectList.add(ObjectUtils.isEmpty(user.getMobilePhoneMasked()) ? StringUtils.EMPTY : user.getMobilePhoneMasked());
        objectList.add(StringUtils.isEmpty(roleName) ? StringUtils.EMPTY : roleName);
        objectList.add(Objects.isNull(user.getCreatedAt()) ? StringUtils.EMPTY : toDateTimeFormat(user.getCreatedAt()));
        objectList.add(ObjectUtils.isEmpty(user.getStatus()) ? StringUtils.EMPTY : user.getStatus());
        return objectList;
    }

package com.epay.merchant.util.file.generator;

import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.util.ErrorConstants;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.text.StringEscapeUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;

import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.text.MessageFormat;
import java.util.List;

@Component
public class CSVGenerator {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     *
     * @param response HttpServletResponse
     * @param fileName String
     * @param headerName headerName
     * @param rows List
     */
    public void downloadCsvFile(HttpServletResponse response, String fileName, List<String> headerName, List<List<Object>> rows) {
        try {
            writeCSV(headerName, rows, response.getOutputStream());
            response.setContentType("text/csv");
            response.setHeader(HttpHeaders.CONTENT_DISPOSITION, StringEscapeUtils.escapeJava("attachment;filename=" + fileName + "_" + System.currentTimeMillis() + ".csv"));
        } catch (Exception e) {
            log.error("Error occurred during CSV File downloading : {}", e.getMessage());
            throw new MerchantException(ErrorConstants.FILE_GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "csv", e.getMessage()));
        }
    }

    /**
     * Writing CSV header and rows in output stream.
     * @param headers List
     * @param rows List
     * @param outputStream OutputStream
     */
    private void writeCSV(List<String> headers, List<List<Object>> rows, OutputStream outputStream) {
        CSVFormat csvFormat = CSVFormat.DEFAULT.builder().setHeader(headers.toArray(String[]::new)).build();
        try (CSVPrinter csvPrinter = new CSVPrinter(new OutputStreamWriter(outputStream), csvFormat)) {
            for (List<Object> row : rows) {
                for (Object value : row)
                    csvPrinter.print(value);
            }
        } catch (Exception e) {
            log.error("Failed to write in CSV: ", e);
            throw new MerchantException(ErrorConstants.FILE_GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.FILE_GENERATION_ERROR_MESSAGE, "csv", e.getMessage()));
        }
    }
}
