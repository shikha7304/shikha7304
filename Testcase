package com.epay.merchant.service;

import com.epay.merchant.model.request.OtpGenerationRequest;
import com.epay.merchant.validator.OtpValidator;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

import java.util.UUID;

class OtpServiceTest {


    @InjectMocks
    OtpService  otpService;

    @Mock
    OtpValidator otpValidator;

    


    @Test
    void TestGenerateOtp_success() {
        OtpGenerationRequest otpGenerationRequest = OtpGenerationRequest.builder().userName("userName").requestId(UUID.fromString("48234277-4836-45e5-8133-ad824d5c015f")).requestType("LOGIN").build();
       
        
        
    }
}


package com.epay.merchant.service;

import com.epay.merchant.entity.Captcha;
import com.epay.merchant.model.request.MerchantLoginRequest;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.validator.MerchantLoginValidator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;

@ExtendWith(MockitoExtension.class)
class LoginServiceTest {

    @InjectMocks
    LoginService loginService;

    @Mock
    MerchantLoginValidator merchantLoginValidator;


    @Test
    void testMerchantLogin_ValidData() {
        MerchantLoginRequest merchantLoginRequest = MerchantLoginRequest.builder().userName("userName").requestId(UUID.fromString("48234277-4836-45e5-8133-ad824d5c015f")).password("abcd123").captchaText("image").build();
        Captcha captcha = Captcha.builder().expiryTime(1734414068155L).captchaImage("image").build();
        assertDoesNotThrow(() -> merchantLoginValidator.validateMerchantLoginRequest(any()));
        MerchantResponse<String> responseDto = loginService.merchantLogin(merchantLoginRequest);
        assertEquals(responseDto.getStatus(), MerchantConstant.RESPONSE_SUCCESS);
        assertEquals(responseDto.getData().getFirst(), "Login User Found successfully");
    }

}
package com.epay.merchant.service;

import com.epay.merchant.config.MerchantConfig;
import com.epay.merchant.dao.OtpManagementDao;
import com.epay.merchant.dto.OtpGenerationDto;
import com.epay.merchant.mapper.OtpManagementMapper;
import com.epay.merchant.model.request.OtpGenerationRequest;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.DateTimeUtils;
import com.epay.merchant.util.EncryptionDecryptionUtil;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.util.MerchantUtil;
import com.epay.merchant.util.enums.NotificationType;
import com.epay.merchant.validator.OtpValidator;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.text.MessageFormat;
import java.util.List;
import java.util.UUID;


@Service
@RequiredArgsConstructor
public class OtpService {

    private final OtpManagementDao otpManagementDao;
    private final OtpValidator otpValidator;
    private final OtpManagementMapper otpManagementMapper;
    private final MerchantConfig merchantConfig;

    public MerchantResponse<String> generateOtp(OtpGenerationRequest otpGenerationRequest) {
        // Step 1 : Validate OtpGenerationRequest
        otpValidator.validateOtpGeneration(otpGenerationRequest);
        // Step 2 : Generate the OTP and save Hashed value in DB
        OtpGenerationDto otpGenerationDto = otpManagementMapper.mapOtpGenerationToOtpGenerationDto(otpGenerationRequest);
        String otp = MerchantUtil.generateOtp();
        otpGenerationDto.setOtpCode(EncryptionDecryptionUtil.hashValue(otp));
        otpGenerationDto.setExpiryTime(DateTimeUtils.addMinutes(merchantConfig.getOtpExpiryTime()));
        UUID entityId = otpManagementDao.save(otpGenerationDto);
        otpGenerationDto.setId(entityId);
        // Step 3 : Send the Notification to User via Notification Service
        // TODO : Call the the Notification Service to send the email and sms
        // Step 4 : Save Notification info in Table
        otpManagementDao.saveNotification(otpGenerationDto, "OTP for validation on Email :"+otp, MerchantConstant.RESPONSE_SUCCESS, NotificationType.EMAIL);
        otpManagementDao.saveNotification(otpGenerationDto, "OTP for validation on SMS :"+otp, MerchantConstant.RESPONSE_SUCCESS, NotificationType.SMS);
        // Step 5 : Build Merchant success Response and send
        return MerchantResponse.<String>builder().data(List.of(MessageFormat.format(MerchantConstant.SUCCESS_MESSAGE, "Otp Generated"))).status(MerchantConstant.RESPONSE_SUCCESS).build();
    }
}

public class OtpValidator extends BaseValidator {

    private final OtpManagementDao otpManagementDao;

    public void validateOtpGeneration(OtpGenerationRequest otpGenerationRequest) {
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(otpGenerationRequest);
        //validateEnumFieldValue(otpGenerationRequest.getRequestType());
        validateMerchantUser(otpGenerationRequest);
        validateRequestId(otpGenerationRequest);
        checkRequestInProgress(otpGenerationRequest);
    }


import com.epay.merchant.dto.OtpGenerationDto;
import com.epay.merchant.entity.OtpManagement;
import com.epay.merchant.model.request.OtpGenerationRequest;
import com.epay.merchant.util.enums.RequestType;
import org.mapstruct.AfterMapping;
import org.mapstruct.Builder;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;

@Mapper(builder = @Builder(disableBuilder = true), componentModel = "spring")
public interface OtpManagementMapper {

    OtpGenerationDto mapOtpGenerationToOtpGenerationDto(OtpGenerationRequest otpGenerationRequest);
    @AfterMapping
    default void afterMapOtpGenerationToOtpGenerationDto(OtpGenerationRequest otpGenerationRequest, @MappingTarget OtpGenerationDto otpGenerationDto) {
        otpGenerationDto.setRequestType(RequestType.getRequestType(otpGenerationRequest.getRequestType().toUpperCase()));
    }

    OtpManagement mapOtpGenerationDtoToOtpManagement(OtpGenerationDto otpGenerationDto);
}

public class OtpManagementDao {

    private final OtpManagementRepository otpManagementRepository;
    private final MerchantUserRepository merchantUserRepository;
    private final NotificationDao notificationDao;
    private final OtpManagementMapper otpManagementMapper;

 
public UUID save(OtpGenerationDto otpGenerationDto) {
        MerchantUser merchantUser = merchantUserRepository.findByUserNameOrEmailOrMobilePhone(otpGenerationDto.getUserName(), otpGenerationDto.getUserName(), otpGenerationDto.getUserName());
        OtpManagement otpManagement = otpManagementMapper.mapOtpGenerationDtoToOtpManagement(otpGenerationDto);
        otpManagement.setUserId(merchantUser.getId());
        otpManagement = otpManagementRepository.save(otpManagement);
        return otpManagement.getId();
    }

public void saveNotification(OtpGenerationDto otpGenerationDto, String content, int status, NotificationType notificationType) {
        notificationDao.saveOtpGenerationNotification(otpGenerationDto, content, status, notificationType);
    }
